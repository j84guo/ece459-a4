<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="709.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="709.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.43%)</title><rect x="0.0000%" y="645" width="0.4283%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="655.50"></text></g><g><title>pthread_getattr_np (1 samples, 0.21%)</title><rect x="0.4283%" y="629" width="0.2141%" height="15" fill="rgb(217,0,24)"/><text x="0.6783%" y="639.50"></text></g><g><title>[[heap]] (3 samples, 0.64%)</title><rect x="0.4283%" y="645" width="0.6424%" height="15" fill="rgb(221,193,54)"/><text x="0.6783%" y="655.50"></text></g><g><title>start_thread (2 samples, 0.43%)</title><rect x="0.6424%" y="629" width="0.4283%" height="15" fill="rgb(248,212,6)"/><text x="0.8924%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="1.0707%" y="629" width="0.2141%" height="15" fill="rgb(208,68,35)"/><text x="1.3207%" y="639.50"></text></g><g><title>[[stack]] (2 samples, 0.43%)</title><rect x="1.0707%" y="645" width="0.4283%" height="15" fill="rgb(232,128,0)"/><text x="1.3207%" y="655.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (1 samples, 0.21%)</title><rect x="1.2848%" y="629" width="0.2141%" height="15" fill="rgb(207,160,47)"/><text x="1.5348%" y="639.50"></text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (1 samples, 0.21%)</title><rect x="1.4989%" y="629" width="0.2141%" height="15" fill="rgb(228,23,34)"/><text x="1.7489%" y="639.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="1.4989%" y="613" width="0.2141%" height="15" fill="rgb(218,30,26)"/><text x="1.7489%" y="623.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="1.4989%" y="597" width="0.2141%" height="15" fill="rgb(220,122,19)"/><text x="1.7489%" y="607.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="1.4989%" y="581" width="0.2141%" height="15" fill="rgb(250,228,42)"/><text x="1.7489%" y="591.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (1 samples, 0.21%)</title><rect x="1.4989%" y="565" width="0.2141%" height="15" fill="rgb(240,193,28)"/><text x="1.7489%" y="575.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="1.7131%" y="629" width="0.2141%" height="15" fill="rgb(216,20,37)"/><text x="1.9631%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="1.7131%" y="613" width="0.2141%" height="15" fill="rgb(206,188,39)"/><text x="1.9631%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="1.7131%" y="597" width="0.2141%" height="15" fill="rgb(217,207,13)"/><text x="1.9631%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="1.7131%" y="581" width="0.2141%" height="15" fill="rgb(231,73,38)"/><text x="1.9631%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="1.9272%" y="629" width="0.2141%" height="15" fill="rgb(225,20,46)"/><text x="2.1772%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="1.9272%" y="613" width="0.2141%" height="15" fill="rgb(210,31,41)"/><text x="2.1772%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.21%)</title><rect x="1.9272%" y="597" width="0.2141%" height="15" fill="rgb(221,200,47)"/><text x="2.1772%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1 samples, 0.21%)</title><rect x="1.9272%" y="581" width="0.2141%" height="15" fill="rgb(226,26,5)"/><text x="2.1772%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="2.1413%" y="629" width="0.2141%" height="15" fill="rgb(249,33,26)"/><text x="2.3913%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.21%)</title><rect x="2.1413%" y="613" width="0.2141%" height="15" fill="rgb(235,183,28)"/><text x="2.3913%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="2.1413%" y="597" width="0.2141%" height="15" fill="rgb(221,5,38)"/><text x="2.3913%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="2.1413%" y="581" width="0.2141%" height="15" fill="rgb(247,18,42)"/><text x="2.3913%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="2.1413%" y="565" width="0.2141%" height="15" fill="rgb(241,131,45)"/><text x="2.3913%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.21%)</title><rect x="2.1413%" y="549" width="0.2141%" height="15" fill="rgb(249,31,29)"/><text x="2.3913%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1 samples, 0.21%)</title><rect x="2.1413%" y="533" width="0.2141%" height="15" fill="rgb(225,111,53)"/><text x="2.3913%" y="543.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (1 samples, 0.21%)</title><rect x="2.1413%" y="517" width="0.2141%" height="15" fill="rgb(238,160,17)"/><text x="2.3913%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (1 samples, 0.21%)</title><rect x="2.1413%" y="501" width="0.2141%" height="15" fill="rgb(214,148,48)"/><text x="2.3913%" y="511.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.43%)</title><rect x="2.3555%" y="629" width="0.4283%" height="15" fill="rgb(232,36,49)"/><text x="2.6055%" y="639.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.21%)</title><rect x="2.7837%" y="629" width="0.2141%" height="15" fill="rgb(209,103,24)"/><text x="3.0337%" y="639.50"></text></g><g><title>__GI___libc_free (2 samples, 0.43%)</title><rect x="2.9979%" y="629" width="0.4283%" height="15" fill="rgb(229,88,8)"/><text x="3.2479%" y="639.50"></text></g><g><title>_int_realloc (1 samples, 0.21%)</title><rect x="3.4261%" y="629" width="0.2141%" height="15" fill="rgb(213,181,19)"/><text x="3.6761%" y="639.50"></text></g><g><title>[anon] (11 samples, 2.36%)</title><rect x="1.4989%" y="645" width="2.3555%" height="15" fill="rgb(254,191,54)"/><text x="1.7489%" y="655.50">[..</text></g><g><title>hex::val (1 samples, 0.21%)</title><rect x="3.6403%" y="629" width="0.2141%" height="15" fill="rgb(241,83,37)"/><text x="3.8903%" y="639.50"></text></g><g><title>[lab4] (1 samples, 0.21%)</title><rect x="3.8544%" y="645" width="0.2141%" height="15" fill="rgb(233,36,39)"/><text x="4.1044%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="3.8544%" y="629" width="0.2141%" height="15" fill="rgb(226,3,54)"/><text x="4.1044%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (3 samples, 0.64%)</title><rect x="4.0685%" y="629" width="0.6424%" height="15" fill="rgb(245,192,40)"/><text x="4.3185%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (3 samples, 0.64%)</title><rect x="4.0685%" y="613" width="0.6424%" height="15" fill="rgb(238,167,29)"/><text x="4.3185%" y="623.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="4.4968%" y="597" width="0.2141%" height="15" fill="rgb(232,182,51)"/><text x="4.7468%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="4.4968%" y="581" width="0.2141%" height="15" fill="rgb(231,60,39)"/><text x="4.7468%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="4.7109%" y="629" width="0.2141%" height="15" fill="rgb(208,69,12)"/><text x="4.9609%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="4.7109%" y="613" width="0.2141%" height="15" fill="rgb(235,93,37)"/><text x="4.9609%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.21%)</title><rect x="4.7109%" y="597" width="0.2141%" height="15" fill="rgb(213,116,39)"/><text x="4.9609%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1 samples, 0.21%)</title><rect x="4.7109%" y="581" width="0.2141%" height="15" fill="rgb(222,207,29)"/><text x="4.9609%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (4 samples, 0.86%)</title><rect x="5.1392%" y="533" width="0.8565%" height="15" fill="rgb(206,96,30)"/><text x="5.3892%" y="543.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (4 samples, 0.86%)</title><rect x="5.1392%" y="517" width="0.8565%" height="15" fill="rgb(218,138,4)"/><text x="5.3892%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (4 samples, 0.86%)</title><rect x="5.1392%" y="501" width="0.8565%" height="15" fill="rgb(250,191,14)"/><text x="5.3892%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (8 samples, 1.71%)</title><rect x="4.9251%" y="629" width="1.7131%" height="15" fill="rgb(239,60,40)"/><text x="5.1751%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (7 samples, 1.50%)</title><rect x="5.1392%" y="613" width="1.4989%" height="15" fill="rgb(206,27,48)"/><text x="5.3892%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 1.50%)</title><rect x="5.1392%" y="597" width="1.4989%" height="15" fill="rgb(225,35,8)"/><text x="5.3892%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 1.50%)</title><rect x="5.1392%" y="581" width="1.4989%" height="15" fill="rgb(250,213,24)"/><text x="5.3892%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (7 samples, 1.50%)</title><rect x="5.1392%" y="565" width="1.4989%" height="15" fill="rgb(247,123,22)"/><text x="5.3892%" y="575.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (7 samples, 1.50%)</title><rect x="5.1392%" y="549" width="1.4989%" height="15" fill="rgb(231,138,38)"/><text x="5.3892%" y="559.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.64%)</title><rect x="5.9957%" y="533" width="0.6424%" height="15" fill="rgb(231,145,46)"/><text x="6.2457%" y="543.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.21%)</title><rect x="6.6381%" y="629" width="0.2141%" height="15" fill="rgb(251,118,11)"/><text x="6.8881%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.21%)</title><rect x="6.8522%" y="629" width="0.2141%" height="15" fill="rgb(217,147,25)"/><text x="7.1022%" y="639.50"></text></g><g><title>__GI___sysconf (1 samples, 0.21%)</title><rect x="7.0664%" y="629" width="0.2141%" height="15" fill="rgb(247,81,37)"/><text x="7.3164%" y="639.50"></text></g><g><title>__rdl_realloc (2 samples, 0.43%)</title><rect x="7.2805%" y="629" width="0.4283%" height="15" fill="rgb(209,12,38)"/><text x="7.5305%" y="639.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (2 samples, 0.43%)</title><rect x="7.2805%" y="613" width="0.4283%" height="15" fill="rgb(227,1,9)"/><text x="7.5305%" y="623.50"></text></g><g><title>std::io::stdio::set_panic (1 samples, 0.21%)</title><rect x="7.7088%" y="629" width="0.2141%" height="15" fill="rgb(248,47,43)"/><text x="7.9588%" y="639.50"></text></g><g><title>[unknown] (19 samples, 4.07%)</title><rect x="4.0685%" y="645" width="4.0685%" height="15" fill="rgb(221,10,30)"/><text x="4.3185%" y="655.50">[unk..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (1 samples, 0.21%)</title><rect x="7.9229%" y="629" width="0.2141%" height="15" fill="rgb(210,229,1)"/><text x="8.1729%" y="639.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.21%)</title><rect x="7.9229%" y="613" width="0.2141%" height="15" fill="rgb(222,148,37)"/><text x="8.1729%" y="623.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.21%)</title><rect x="7.9229%" y="597" width="0.2141%" height="15" fill="rgb(234,67,33)"/><text x="8.1729%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1 samples, 0.21%)</title><rect x="23.1263%" y="101" width="0.2141%" height="15" fill="rgb(247,98,35)"/><text x="23.3763%" y="111.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (1 samples, 0.21%)</title><rect x="23.1263%" y="85" width="0.2141%" height="15" fill="rgb(247,138,52)"/><text x="23.3763%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (1 samples, 0.21%)</title><rect x="23.1263%" y="69" width="0.2141%" height="15" fill="rgb(213,79,30)"/><text x="23.3763%" y="79.50"></text></g><g><title>hex::val (1 samples, 0.21%)</title><rect x="23.1263%" y="53" width="0.2141%" height="15" fill="rgb(246,177,23)"/><text x="23.3763%" y="63.50"></text></g><g><title>lab4::idea::IdeaGenerator::run (2 samples, 0.43%)</title><rect x="23.1263%" y="421" width="0.4283%" height="15" fill="rgb(230,62,27)"/><text x="23.3763%" y="431.50"></text></g><g><title>lab4::checksum::Checksum::update (2 samples, 0.43%)</title><rect x="23.1263%" y="405" width="0.4283%" height="15" fill="rgb(216,154,8)"/><text x="23.3763%" y="415.50"></text></g><g><title>hex::decode (2 samples, 0.43%)</title><rect x="23.1263%" y="389" width="0.4283%" height="15" fill="rgb(244,35,45)"/><text x="23.3763%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (2 samples, 0.43%)</title><rect x="23.1263%" y="373" width="0.4283%" height="15" fill="rgb(251,115,12)"/><text x="23.3763%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.43%)</title><rect x="23.1263%" y="357" width="0.4283%" height="15" fill="rgb(240,54,50)"/><text x="23.3763%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (2 samples, 0.43%)</title><rect x="23.1263%" y="341" width="0.4283%" height="15" fill="rgb(233,84,52)"/><text x="23.3763%" y="351.50"></text></g><g><title>core::iter::adapters::process_results (2 samples, 0.43%)</title><rect x="23.1263%" y="325" width="0.4283%" height="15" fill="rgb(207,117,47)"/><text x="23.3763%" y="335.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (2 samples, 0.43%)</title><rect x="23.1263%" y="309" width="0.4283%" height="15" fill="rgb(249,43,39)"/><text x="23.3763%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.43%)</title><rect x="23.1263%" y="293" width="0.4283%" height="15" fill="rgb(209,38,44)"/><text x="23.3763%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.43%)</title><rect x="23.1263%" y="277" width="0.4283%" height="15" fill="rgb(236,212,23)"/><text x="23.3763%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.43%)</title><rect x="23.1263%" y="261" width="0.4283%" height="15" fill="rgb(242,79,21)"/><text x="23.3763%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.43%)</title><rect x="23.1263%" y="245" width="0.4283%" height="15" fill="rgb(211,96,35)"/><text x="23.3763%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.43%)</title><rect x="23.1263%" y="229" width="0.4283%" height="15" fill="rgb(253,215,40)"/><text x="23.3763%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (2 samples, 0.43%)</title><rect x="23.1263%" y="213" width="0.4283%" height="15" fill="rgb(211,81,21)"/><text x="23.3763%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.43%)</title><rect x="23.1263%" y="197" width="0.4283%" height="15" fill="rgb(208,190,38)"/><text x="23.3763%" y="207.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.43%)</title><rect x="23.1263%" y="181" width="0.4283%" height="15" fill="rgb(235,213,38)"/><text x="23.3763%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.43%)</title><rect x="23.1263%" y="165" width="0.4283%" height="15" fill="rgb(237,122,38)"/><text x="23.3763%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.43%)</title><rect x="23.1263%" y="149" width="0.4283%" height="15" fill="rgb(244,218,35)"/><text x="23.3763%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.43%)</title><rect x="23.1263%" y="133" width="0.4283%" height="15" fill="rgb(240,68,47)"/><text x="23.3763%" y="143.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (2 samples, 0.43%)</title><rect x="23.1263%" y="117" width="0.4283%" height="15" fill="rgb(210,16,53)"/><text x="23.3763%" y="127.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="23.3405%" y="101" width="0.2141%" height="15" fill="rgb(235,124,12)"/><text x="23.5905%" y="111.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.64%)</title><rect x="23.5546%" y="405" width="0.6424%" height="15" fill="rgb(224,169,11)"/><text x="23.8046%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.64%)</title><rect x="23.5546%" y="389" width="0.6424%" height="15" fill="rgb(250,166,2)"/><text x="23.8046%" y="399.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (3 samples, 0.64%)</title><rect x="23.5546%" y="373" width="0.6424%" height="15" fill="rgb(242,216,29)"/><text x="23.8046%" y="383.50"></text></g><g><title>alloc::slice::hack::to_vec (3 samples, 0.64%)</title><rect x="23.5546%" y="357" width="0.6424%" height="15" fill="rgb(230,116,27)"/><text x="23.8046%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (3 samples, 0.64%)</title><rect x="23.5546%" y="341" width="0.6424%" height="15" fill="rgb(228,99,48)"/><text x="23.8046%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (3 samples, 0.64%)</title><rect x="23.5546%" y="325" width="0.6424%" height="15" fill="rgb(253,11,6)"/><text x="23.8046%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (3 samples, 0.64%)</title><rect x="23.5546%" y="309" width="0.6424%" height="15" fill="rgb(247,143,39)"/><text x="23.8046%" y="319.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (3 samples, 0.64%)</title><rect x="23.5546%" y="293" width="0.6424%" height="15" fill="rgb(236,97,10)"/><text x="23.8046%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (3 samples, 0.64%)</title><rect x="23.5546%" y="277" width="0.6424%" height="15" fill="rgb(233,208,19)"/><text x="23.8046%" y="287.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.64%)</title><rect x="23.5546%" y="261" width="0.6424%" height="15" fill="rgb(216,164,2)"/><text x="23.8046%" y="271.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.64%)</title><rect x="23.5546%" y="245" width="0.6424%" height="15" fill="rgb(220,129,5)"/><text x="23.8046%" y="255.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.64%)</title><rect x="23.5546%" y="229" width="0.6424%" height="15" fill="rgb(242,17,10)"/><text x="23.8046%" y="239.50"></text></g><g><title>_int_malloc (1 samples, 0.21%)</title><rect x="23.9829%" y="213" width="0.2141%" height="15" fill="rgb(242,107,0)"/><text x="24.2329%" y="223.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (1 samples, 0.21%)</title><rect x="24.1970%" y="405" width="0.2141%" height="15" fill="rgb(251,28,31)"/><text x="24.4470%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (1 samples, 0.21%)</title><rect x="24.1970%" y="389" width="0.2141%" height="15" fill="rgb(233,223,10)"/><text x="24.4470%" y="399.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (1 samples, 0.21%)</title><rect x="24.1970%" y="373" width="0.2141%" height="15" fill="rgb(215,21,27)"/><text x="24.4470%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.21%)</title><rect x="24.1970%" y="357" width="0.2141%" height="15" fill="rgb(232,23,21)"/><text x="24.4470%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.21%)</title><rect x="24.1970%" y="341" width="0.2141%" height="15" fill="rgb(244,5,23)"/><text x="24.4470%" y="351.50"></text></g><g><title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.21%)</title><rect x="25.0535%" y="85" width="0.2141%" height="15" fill="rgb(226,81,46)"/><text x="25.3035%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (32 samples, 6.85%)</title><rect x="24.8394%" y="101" width="6.8522%" height="15" fill="rgb(247,70,30)"/><text x="25.0894%" y="111.50">&lt;core::it..</text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (30 samples, 6.42%)</title><rect x="25.2677%" y="85" width="6.4240%" height="15" fill="rgb(212,68,19)"/><text x="25.5177%" y="95.50">core::it..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (28 samples, 6.00%)</title><rect x="25.6959%" y="69" width="5.9957%" height="15" fill="rgb(240,187,13)"/><text x="25.9459%" y="79.50">&lt;alloc::..</text></g><g><title>hex::val (22 samples, 4.71%)</title><rect x="26.9807%" y="53" width="4.7109%" height="15" fill="rgb(223,113,26)"/><text x="27.2307%" y="63.50">hex::..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 7.28%)</title><rect x="24.8394%" y="197" width="7.2805%" height="15" fill="rgb(206,192,2)"/><text x="25.0894%" y="207.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::find (34 samples, 7.28%)</title><rect x="24.8394%" y="181" width="7.2805%" height="15" fill="rgb(241,108,4)"/><text x="25.0894%" y="191.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 7.28%)</title><rect x="24.8394%" y="165" width="7.2805%" height="15" fill="rgb(247,173,49)"/><text x="25.0894%" y="175.50">&lt;core::ite..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 7.28%)</title><rect x="24.8394%" y="149" width="7.2805%" height="15" fill="rgb(224,114,35)"/><text x="25.0894%" y="159.50">&lt;core::ite..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 7.28%)</title><rect x="24.8394%" y="133" width="7.2805%" height="15" fill="rgb(245,159,27)"/><text x="25.0894%" y="143.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34 samples, 7.28%)</title><rect x="24.8394%" y="117" width="7.2805%" height="15" fill="rgb(245,172,44)"/><text x="25.0894%" y="127.50">core::iter..</text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.43%)</title><rect x="31.6916%" y="101" width="0.4283%" height="15" fill="rgb(236,23,11)"/><text x="31.9416%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.43%)</title><rect x="32.1199%" y="197" width="0.4283%" height="15" fill="rgb(205,117,38)"/><text x="32.3699%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.64%)</title><rect x="32.5482%" y="197" width="0.6424%" height="15" fill="rgb(237,72,25)"/><text x="32.7982%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.64%)</title><rect x="32.5482%" y="181" width="0.6424%" height="15" fill="rgb(244,70,9)"/><text x="32.7982%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.64%)</title><rect x="32.5482%" y="165" width="0.6424%" height="15" fill="rgb(217,125,39)"/><text x="32.7982%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.64%)</title><rect x="32.5482%" y="149" width="0.6424%" height="15" fill="rgb(235,36,10)"/><text x="32.7982%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.64%)</title><rect x="32.5482%" y="133" width="0.6424%" height="15" fill="rgb(251,123,47)"/><text x="32.7982%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (3 samples, 0.64%)</title><rect x="32.5482%" y="117" width="0.6424%" height="15" fill="rgb(221,13,13)"/><text x="32.7982%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.64%)</title><rect x="32.5482%" y="101" width="0.6424%" height="15" fill="rgb(238,131,9)"/><text x="32.7982%" y="111.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.64%)</title><rect x="32.5482%" y="85" width="0.6424%" height="15" fill="rgb(211,50,8)"/><text x="32.7982%" y="95.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.64%)</title><rect x="32.5482%" y="69" width="0.6424%" height="15" fill="rgb(245,182,24)"/><text x="32.7982%" y="79.50"></text></g><g><title>_int_realloc (2 samples, 0.43%)</title><rect x="32.7623%" y="53" width="0.4283%" height="15" fill="rgb(242,14,37)"/><text x="33.0123%" y="63.50"></text></g><g><title>_int_free (1 samples, 0.21%)</title><rect x="32.9764%" y="37" width="0.2141%" height="15" fill="rgb(246,228,12)"/><text x="33.2264%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (42 samples, 8.99%)</title><rect x="24.6253%" y="229" width="8.9936%" height="15" fill="rgb(213,55,15)"/><text x="24.8753%" y="239.50">&lt;alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (42 samples, 8.99%)</title><rect x="24.6253%" y="213" width="8.9936%" height="15" fill="rgb(209,9,3)"/><text x="24.8753%" y="223.50">alloc::vec::V..</text></g><g><title>core::ptr::write (2 samples, 0.43%)</title><rect x="33.1906%" y="197" width="0.4283%" height="15" fill="rgb(230,59,30)"/><text x="33.4406%" y="207.50"></text></g><g><title>hex::decode (45 samples, 9.64%)</title><rect x="24.4111%" y="389" width="9.6360%" height="15" fill="rgb(209,121,21)"/><text x="24.6611%" y="399.50">hex::decode</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (45 samples, 9.64%)</title><rect x="24.4111%" y="373" width="9.6360%" height="15" fill="rgb(220,109,13)"/><text x="24.6611%" y="383.50">&lt;alloc::vec::V..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (45 samples, 9.64%)</title><rect x="24.4111%" y="357" width="9.6360%" height="15" fill="rgb(232,18,1)"/><text x="24.6611%" y="367.50">core::iter::tr..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (45 samples, 9.64%)</title><rect x="24.4111%" y="341" width="9.6360%" height="15" fill="rgb(215,41,42)"/><text x="24.6611%" y="351.50">&lt;core::result:..</text></g><g><title>core::iter::adapters::process_results (45 samples, 9.64%)</title><rect x="24.4111%" y="325" width="9.6360%" height="15" fill="rgb(224,123,36)"/><text x="24.6611%" y="335.50">core::iter::ad..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (45 samples, 9.64%)</title><rect x="24.4111%" y="309" width="9.6360%" height="15" fill="rgb(240,125,3)"/><text x="24.6611%" y="319.50">&lt;core::result:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (45 samples, 9.64%)</title><rect x="24.4111%" y="293" width="9.6360%" height="15" fill="rgb(205,98,50)"/><text x="24.6611%" y="303.50">core::iter::tr..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (45 samples, 9.64%)</title><rect x="24.4111%" y="277" width="9.6360%" height="15" fill="rgb(205,185,37)"/><text x="24.6611%" y="287.50">&lt;alloc::vec::V..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (44 samples, 9.42%)</title><rect x="24.6253%" y="261" width="9.4218%" height="15" fill="rgb(238,207,15)"/><text x="24.8753%" y="271.50">&lt;alloc::vec::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (44 samples, 9.42%)</title><rect x="24.6253%" y="245" width="9.4218%" height="15" fill="rgb(213,199,42)"/><text x="24.8753%" y="255.50">&lt;alloc::vec::..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.43%)</title><rect x="33.6188%" y="229" width="0.4283%" height="15" fill="rgb(235,201,11)"/><text x="33.8688%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.43%)</title><rect x="33.6188%" y="213" width="0.4283%" height="15" fill="rgb(207,46,11)"/><text x="33.8688%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.43%)</title><rect x="33.6188%" y="197" width="0.4283%" height="15" fill="rgb(241,35,35)"/><text x="33.8688%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.43%)</title><rect x="33.6188%" y="181" width="0.4283%" height="15" fill="rgb(243,32,47)"/><text x="33.8688%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.43%)</title><rect x="33.6188%" y="165" width="0.4283%" height="15" fill="rgb(247,202,23)"/><text x="33.8688%" y="175.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.43%)</title><rect x="33.6188%" y="149" width="0.4283%" height="15" fill="rgb(219,102,11)"/><text x="33.8688%" y="159.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.43%)</title><rect x="33.6188%" y="133" width="0.4283%" height="15" fill="rgb(243,110,44)"/><text x="33.8688%" y="143.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.43%)</title><rect x="33.6188%" y="117" width="0.4283%" height="15" fill="rgb(222,74,54)"/><text x="33.8688%" y="127.50"></text></g><g><title>_int_malloc (2 samples, 0.43%)</title><rect x="33.6188%" y="101" width="0.4283%" height="15" fill="rgb(216,99,12)"/><text x="33.8688%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="35.3319%" y="245" width="0.2141%" height="15" fill="rgb(226,22,26)"/><text x="35.5819%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.21%)</title><rect x="35.3319%" y="229" width="0.2141%" height="15" fill="rgb(217,163,10)"/><text x="35.5819%" y="239.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.86%)</title><rect x="35.1178%" y="261" width="0.8565%" height="15" fill="rgb(213,25,53)"/><text x="35.3678%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.43%)</title><rect x="35.5460%" y="245" width="0.4283%" height="15" fill="rgb(252,105,26)"/><text x="35.7960%" y="255.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2 samples, 0.43%)</title><rect x="35.5460%" y="229" width="0.4283%" height="15" fill="rgb(220,39,43)"/><text x="35.7960%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.21%)</title><rect x="35.9743%" y="197" width="0.2141%" height="15" fill="rgb(229,68,48)"/><text x="36.2243%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.21%)</title><rect x="35.9743%" y="181" width="0.2141%" height="15" fill="rgb(252,8,32)"/><text x="36.2243%" y="191.50"></text></g><g><title>lab4::checksum::Checksum::update (57 samples, 12.21%)</title><rect x="24.4111%" y="405" width="12.2056%" height="15" fill="rgb(223,20,43)"/><text x="24.6611%" y="415.50">lab4::checksum::Ch..</text></g><g><title>hex::encode (12 samples, 2.57%)</title><rect x="34.0471%" y="389" width="2.5696%" height="15" fill="rgb(229,81,49)"/><text x="34.2971%" y="399.50">he..</text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (12 samples, 2.57%)</title><rect x="34.0471%" y="373" width="2.5696%" height="15" fill="rgb(236,28,36)"/><text x="34.2971%" y="383.50">&lt;T..</text></g><g><title>hex::encode_to_iter (12 samples, 2.57%)</title><rect x="34.0471%" y="357" width="2.5696%" height="15" fill="rgb(249,185,26)"/><text x="34.2971%" y="367.50">he..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 2.57%)</title><rect x="34.0471%" y="341" width="2.5696%" height="15" fill="rgb(249,174,33)"/><text x="34.2971%" y="351.50">co..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9 samples, 1.93%)</title><rect x="34.6895%" y="325" width="1.9272%" height="15" fill="rgb(233,201,37)"/><text x="34.9395%" y="335.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (8 samples, 1.71%)</title><rect x="34.9036%" y="309" width="1.7131%" height="15" fill="rgb(221,78,26)"/><text x="35.1536%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 1.71%)</title><rect x="34.9036%" y="293" width="1.7131%" height="15" fill="rgb(250,127,30)"/><text x="35.1536%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 1.71%)</title><rect x="34.9036%" y="277" width="1.7131%" height="15" fill="rgb(230,49,44)"/><text x="35.1536%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (3 samples, 0.64%)</title><rect x="35.9743%" y="261" width="0.6424%" height="15" fill="rgb(229,67,23)"/><text x="36.2243%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (3 samples, 0.64%)</title><rect x="35.9743%" y="245" width="0.6424%" height="15" fill="rgb(249,83,47)"/><text x="36.2243%" y="255.50"></text></g><g><title>alloc::string::String::push (3 samples, 0.64%)</title><rect x="35.9743%" y="229" width="0.6424%" height="15" fill="rgb(215,43,3)"/><text x="36.2243%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (3 samples, 0.64%)</title><rect x="35.9743%" y="213" width="0.6424%" height="15" fill="rgb(238,154,13)"/><text x="36.2243%" y="223.50"></text></g><g><title>core::ptr::write (2 samples, 0.43%)</title><rect x="36.1884%" y="197" width="0.4283%" height="15" fill="rgb(219,56,2)"/><text x="36.4384%" y="207.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.21%)</title><rect x="36.6167%" y="229" width="0.2141%" height="15" fill="rgb(233,0,4)"/><text x="36.8667%" y="239.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.21%)</title><rect x="36.6167%" y="213" width="0.2141%" height="15" fill="rgb(235,30,7)"/><text x="36.8667%" y="223.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.21%)</title><rect x="36.6167%" y="197" width="0.2141%" height="15" fill="rgb(250,79,13)"/><text x="36.8667%" y="207.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::_{{closure}} (1 samples, 0.21%)</title><rect x="36.6167%" y="181" width="0.2141%" height="15" fill="rgb(211,146,34)"/><text x="36.8667%" y="191.50"></text></g><g><title>sha2::sha256::soft::add (1 samples, 0.21%)</title><rect x="36.8308%" y="181" width="0.2141%" height="15" fill="rgb(228,22,38)"/><text x="37.0808%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.21%)</title><rect x="36.8308%" y="165" width="0.2141%" height="15" fill="rgb(235,168,5)"/><text x="37.0808%" y="175.50"></text></g><g><title>sha2::sha256::soft::sha256msg1 (3 samples, 0.64%)</title><rect x="36.8308%" y="197" width="0.6424%" height="15" fill="rgb(221,155,16)"/><text x="37.0808%" y="207.50"></text></g><g><title>sha2::sha256::soft::sha256msg1::sigma0x4 (2 samples, 0.43%)</title><rect x="37.0450%" y="181" width="0.4283%" height="15" fill="rgb(215,215,53)"/><text x="37.2950%" y="191.50"></text></g><g><title>sha2::sha256::soft::or (2 samples, 0.43%)</title><rect x="37.0450%" y="165" width="0.4283%" height="15" fill="rgb(223,4,10)"/><text x="37.2950%" y="175.50"></text></g><g><title>sha2::sha256::soft::schedule (5 samples, 1.07%)</title><rect x="36.8308%" y="213" width="1.0707%" height="15" fill="rgb(234,103,6)"/><text x="37.0808%" y="223.50"></text></g><g><title>sha2::sha256::soft::sha256msg2 (2 samples, 0.43%)</title><rect x="37.4732%" y="197" width="0.4283%" height="15" fill="rgb(227,97,0)"/><text x="37.7232%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.21%)</title><rect x="37.6874%" y="181" width="0.2141%" height="15" fill="rgb(234,150,53)"/><text x="37.9374%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (3 samples, 0.64%)</title><rect x="38.7580%" y="197" width="0.6424%" height="15" fill="rgb(228,201,54)"/><text x="39.0080%" y="207.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (17 samples, 3.64%)</title><rect x="36.6167%" y="357" width="3.6403%" height="15" fill="rgb(222,22,37)"/><text x="36.8667%" y="367.50">&lt;D a..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (17 samples, 3.64%)</title><rect x="36.6167%" y="341" width="3.6403%" height="15" fill="rgb(237,53,32)"/><text x="36.8667%" y="351.50">&lt;sha..</text></g><g><title>sha2::sha256::Engine256::finish (17 samples, 3.64%)</title><rect x="36.6167%" y="325" width="3.6403%" height="15" fill="rgb(233,25,53)"/><text x="36.8667%" y="335.50">sha2..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (17 samples, 3.64%)</title><rect x="36.6167%" y="309" width="3.6403%" height="15" fill="rgb(210,40,34)"/><text x="36.8667%" y="319.50">bloc..</text></g><g><title>sha2::sha256::Engine256::finish::_{{closure}} (17 samples, 3.64%)</title><rect x="36.6167%" y="293" width="3.6403%" height="15" fill="rgb(241,220,44)"/><text x="36.8667%" y="303.50">sha2..</text></g><g><title>sha2::sha256::compress256 (17 samples, 3.64%)</title><rect x="36.6167%" y="277" width="3.6403%" height="15" fill="rgb(235,28,35)"/><text x="36.8667%" y="287.50">sha2..</text></g><g><title>sha2::sha256::x86::compress (17 samples, 3.64%)</title><rect x="36.6167%" y="261" width="3.6403%" height="15" fill="rgb(210,56,17)"/><text x="36.8667%" y="271.50">sha2..</text></g><g><title>sha2::sha256::soft::compress (17 samples, 3.64%)</title><rect x="36.6167%" y="245" width="3.6403%" height="15" fill="rgb(224,130,29)"/><text x="36.8667%" y="255.50">sha2..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (16 samples, 3.43%)</title><rect x="36.8308%" y="229" width="3.4261%" height="15" fill="rgb(235,212,8)"/><text x="37.0808%" y="239.50">sha..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (11 samples, 2.36%)</title><rect x="37.9015%" y="213" width="2.3555%" height="15" fill="rgb(223,33,50)"/><text x="38.1515%" y="223.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4 samples, 0.86%)</title><rect x="39.4004%" y="197" width="0.8565%" height="15" fill="rgb(219,149,13)"/><text x="39.6504%" y="207.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (18 samples, 3.85%)</title><rect x="36.6167%" y="389" width="3.8544%" height="15" fill="rgb(250,156,29)"/><text x="36.8667%" y="399.50">&lt;D a..</text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (18 samples, 3.85%)</title><rect x="36.6167%" y="373" width="3.8544%" height="15" fill="rgb(216,193,19)"/><text x="36.8667%" y="383.50">dige..</text></g><g><title>generic_array::impls::&lt;impl core::default::Default for generic_array::GenericArray&lt;T,N&gt;&gt;::default (1 samples, 0.21%)</title><rect x="40.2570%" y="357" width="0.2141%" height="15" fill="rgb(216,135,14)"/><text x="40.5070%" y="367.50"></text></g><g><title>&lt;generic_array::GenericArray&lt;T,N&gt; as generic_array::sequence::GenericSequence&lt;T&gt;&gt;::generate (1 samples, 0.21%)</title><rect x="40.2570%" y="341" width="0.2141%" height="15" fill="rgb(241,47,5)"/><text x="40.5070%" y="351.50"></text></g><g><title>generic_array::ArrayBuilder&lt;T,N&gt;::into_inner (1 samples, 0.21%)</title><rect x="40.2570%" y="325" width="0.2141%" height="15" fill="rgb(233,42,35)"/><text x="40.5070%" y="335.50"></text></g><g><title>alloc::string::String::reserve (1 samples, 0.21%)</title><rect x="40.4711%" y="293" width="0.2141%" height="15" fill="rgb(231,13,6)"/><text x="40.7211%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.21%)</title><rect x="40.4711%" y="277" width="0.2141%" height="15" fill="rgb(207,181,40)"/><text x="40.7211%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.21%)</title><rect x="40.4711%" y="261" width="0.2141%" height="15" fill="rgb(254,173,49)"/><text x="40.7211%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.21%)</title><rect x="40.4711%" y="245" width="0.2141%" height="15" fill="rgb(221,1,38)"/><text x="40.7211%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.21%)</title><rect x="40.4711%" y="229" width="0.2141%" height="15" fill="rgb(206,124,46)"/><text x="40.7211%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.21%)</title><rect x="40.4711%" y="213" width="0.2141%" height="15" fill="rgb(249,21,11)"/><text x="40.7211%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.21%)</title><rect x="40.4711%" y="197" width="0.2141%" height="15" fill="rgb(222,201,40)"/><text x="40.7211%" y="207.50"></text></g><g><title>_int_malloc (1 samples, 0.21%)</title><rect x="40.4711%" y="181" width="0.2141%" height="15" fill="rgb(235,61,29)"/><text x="40.7211%" y="191.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.86%)</title><rect x="40.6852%" y="261" width="0.8565%" height="15" fill="rgb(219,207,3)"/><text x="40.9352%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.86%)</title><rect x="40.6852%" y="245" width="0.8565%" height="15" fill="rgb(222,56,46)"/><text x="40.9352%" y="255.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (4 samples, 0.86%)</title><rect x="40.6852%" y="229" width="0.8565%" height="15" fill="rgb(239,76,54)"/><text x="40.9352%" y="239.50"></text></g><g><title>lab4::package::PackageDownloader::run (89 samples, 19.06%)</title><rect x="23.5546%" y="421" width="19.0578%" height="15" fill="rgb(231,124,27)"/><text x="23.8046%" y="431.50">lab4::package::PackageDownload..</text></g><g><title>lab4::checksum::Checksum::with_sha256 (28 samples, 6.00%)</title><rect x="36.6167%" y="405" width="5.9957%" height="15" fill="rgb(249,195,6)"/><text x="36.8667%" y="415.50">lab4::ch..</text></g><g><title>hex::encode (10 samples, 2.14%)</title><rect x="40.4711%" y="389" width="2.1413%" height="15" fill="rgb(237,174,47)"/><text x="40.7211%" y="399.50">h..</text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (10 samples, 2.14%)</title><rect x="40.4711%" y="373" width="2.1413%" height="15" fill="rgb(206,201,31)"/><text x="40.7211%" y="383.50">&lt;..</text></g><g><title>hex::encode_to_iter (10 samples, 2.14%)</title><rect x="40.4711%" y="357" width="2.1413%" height="15" fill="rgb(231,57,52)"/><text x="40.7211%" y="367.50">h..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (10 samples, 2.14%)</title><rect x="40.4711%" y="341" width="2.1413%" height="15" fill="rgb(248,177,22)"/><text x="40.7211%" y="351.50">c..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (10 samples, 2.14%)</title><rect x="40.4711%" y="325" width="2.1413%" height="15" fill="rgb(215,211,37)"/><text x="40.7211%" y="335.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (10 samples, 2.14%)</title><rect x="40.4711%" y="309" width="2.1413%" height="15" fill="rgb(241,128,51)"/><text x="40.7211%" y="319.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (9 samples, 1.93%)</title><rect x="40.6852%" y="293" width="1.9272%" height="15" fill="rgb(227,165,31)"/><text x="40.9352%" y="303.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 1.93%)</title><rect x="40.6852%" y="277" width="1.9272%" height="15" fill="rgb(228,167,24)"/><text x="40.9352%" y="287.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 1.07%)</title><rect x="41.5418%" y="261" width="1.0707%" height="15" fill="rgb(228,143,12)"/><text x="41.7918%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (5 samples, 1.07%)</title><rect x="41.5418%" y="245" width="1.0707%" height="15" fill="rgb(249,149,8)"/><text x="41.7918%" y="255.50"></text></g><g><title>alloc::string::String::push (5 samples, 1.07%)</title><rect x="41.5418%" y="229" width="1.0707%" height="15" fill="rgb(243,35,44)"/><text x="41.7918%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (5 samples, 1.07%)</title><rect x="41.5418%" y="213" width="1.0707%" height="15" fill="rgb(246,89,9)"/><text x="41.7918%" y="223.50"></text></g><g><title>core::ptr::write (4 samples, 0.86%)</title><rect x="41.7559%" y="197" width="0.8565%" height="15" fill="rgb(233,213,13)"/><text x="42.0059%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::clear (2 samples, 0.43%)</title><rect x="42.6124%" y="405" width="0.4283%" height="15" fill="rgb(233,141,41)"/><text x="42.8624%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::truncate (2 samples, 0.43%)</title><rect x="42.6124%" y="389" width="0.4283%" height="15" fill="rgb(239,167,4)"/><text x="42.8624%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.43%)</title><rect x="42.6124%" y="373" width="0.4283%" height="15" fill="rgb(209,217,16)"/><text x="42.8624%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.43%)</title><rect x="42.6124%" y="357" width="0.4283%" height="15" fill="rgb(219,88,35)"/><text x="42.8624%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.43%)</title><rect x="42.6124%" y="341" width="0.4283%" height="15" fill="rgb(220,193,23)"/><text x="42.8624%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.43%)</title><rect x="42.6124%" y="325" width="0.4283%" height="15" fill="rgb(230,90,52)"/><text x="42.8624%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.43%)</title><rect x="42.6124%" y="309" width="0.4283%" height="15" fill="rgb(252,106,19)"/><text x="42.8624%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.43%)</title><rect x="42.6124%" y="293" width="0.4283%" height="15" fill="rgb(206,74,20)"/><text x="42.8624%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (2 samples, 0.43%)</title><rect x="42.6124%" y="277" width="0.4283%" height="15" fill="rgb(230,138,44)"/><text x="42.8624%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.43%)</title><rect x="42.6124%" y="261" width="0.4283%" height="15" fill="rgb(235,182,43)"/><text x="42.8624%" y="271.50"></text></g><g><title>__GI___libc_free (2 samples, 0.43%)</title><rect x="42.6124%" y="245" width="0.4283%" height="15" fill="rgb(242,16,51)"/><text x="42.8624%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.21%)</title><rect x="42.8266%" y="229" width="0.2141%" height="15" fill="rgb(248,9,4)"/><text x="43.0766%" y="239.50"></text></g><g><title>crossbeam_channel::context::Context::with (2 samples, 0.43%)</title><rect x="43.0407%" y="373" width="0.4283%" height="15" fill="rgb(210,31,22)"/><text x="43.2907%" y="383.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.43%)</title><rect x="43.0407%" y="357" width="0.4283%" height="15" fill="rgb(239,54,39)"/><text x="43.2907%" y="367.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (2 samples, 0.43%)</title><rect x="43.0407%" y="341" width="0.4283%" height="15" fill="rgb(230,99,41)"/><text x="43.2907%" y="351.50"></text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (2 samples, 0.43%)</title><rect x="43.0407%" y="325" width="0.4283%" height="15" fill="rgb(253,106,12)"/><text x="43.2907%" y="335.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::_{{closure}} (2 samples, 0.43%)</title><rect x="43.0407%" y="309" width="0.4283%" height="15" fill="rgb(213,46,41)"/><text x="43.2907%" y="319.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (2 samples, 0.43%)</title><rect x="43.0407%" y="293" width="0.4283%" height="15" fill="rgb(215,133,35)"/><text x="43.2907%" y="303.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (2 samples, 0.43%)</title><rect x="43.0407%" y="277" width="0.4283%" height="15" fill="rgb(213,28,5)"/><text x="43.2907%" y="287.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (2 samples, 0.43%)</title><rect x="43.0407%" y="261" width="0.4283%" height="15" fill="rgb(215,77,49)"/><text x="43.2907%" y="271.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.43%)</title><rect x="43.0407%" y="245" width="0.4283%" height="15" fill="rgb(248,100,22)"/><text x="43.2907%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.43%)</title><rect x="43.0407%" y="229" width="0.4283%" height="15" fill="rgb(208,67,9)"/><text x="43.2907%" y="239.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::read (1 samples, 0.21%)</title><rect x="43.4690%" y="373" width="0.2141%" height="15" fill="rgb(219,133,21)"/><text x="43.7190%" y="383.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.21%)</title><rect x="43.4690%" y="357" width="0.2141%" height="15" fill="rgb(246,46,29)"/><text x="43.7190%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.21%)</title><rect x="43.4690%" y="341" width="0.2141%" height="15" fill="rgb(246,185,52)"/><text x="43.7190%" y="351.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (1 samples, 0.21%)</title><rect x="43.6831%" y="373" width="0.2141%" height="15" fill="rgb(252,136,11)"/><text x="43.9331%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.21%)</title><rect x="43.6831%" y="357" width="0.2141%" height="15" fill="rgb(219,138,53)"/><text x="43.9331%" y="367.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.21%)</title><rect x="43.6831%" y="341" width="0.2141%" height="15" fill="rgb(211,51,23)"/><text x="43.9331%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (5 samples, 1.07%)</title><rect x="43.0407%" y="405" width="1.0707%" height="15" fill="rgb(247,221,28)"/><text x="43.2907%" y="415.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (5 samples, 1.07%)</title><rect x="43.0407%" y="389" width="1.0707%" height="15" fill="rgb(251,222,45)"/><text x="43.2907%" y="399.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (1 samples, 0.21%)</title><rect x="43.8972%" y="373" width="0.2141%" height="15" fill="rgb(217,162,53)"/><text x="44.1472%" y="383.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (1 samples, 0.21%)</title><rect x="43.8972%" y="357" width="0.2141%" height="15" fill="rgb(229,93,14)"/><text x="44.1472%" y="367.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.21%)</title><rect x="43.8972%" y="341" width="0.2141%" height="15" fill="rgb(209,67,49)"/><text x="44.1472%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.21%)</title><rect x="43.8972%" y="325" width="0.2141%" height="15" fill="rgb(213,87,29)"/><text x="44.1472%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="44.1113%" y="357" width="0.2141%" height="15" fill="rgb(205,151,52)"/><text x="44.3613%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="44.1113%" y="341" width="0.2141%" height="15" fill="rgb(253,215,39)"/><text x="44.3613%" y="351.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="44.1113%" y="325" width="0.2141%" height="15" fill="rgb(221,220,41)"/><text x="44.3613%" y="335.50"></text></g><g><title>std::sys::unix::mutex::ReentrantMutex::unlock (1 samples, 0.21%)</title><rect x="44.1113%" y="309" width="0.2141%" height="15" fill="rgb(218,133,21)"/><text x="44.3613%" y="319.50"></text></g><g><title>__GI___pthread_mutex_unlock (1 samples, 0.21%)</title><rect x="44.1113%" y="293" width="0.2141%" height="15" fill="rgb(221,193,43)"/><text x="44.3613%" y="303.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.21%)</title><rect x="44.1113%" y="277" width="0.2141%" height="15" fill="rgb(240,128,52)"/><text x="44.3613%" y="287.50"></text></g><g><title>std::io::Write::write_fmt (4 samples, 0.86%)</title><rect x="44.3255%" y="357" width="0.8565%" height="15" fill="rgb(253,114,12)"/><text x="44.5755%" y="367.50"></text></g><g><title>core::fmt::write (4 samples, 0.86%)</title><rect x="44.3255%" y="341" width="0.8565%" height="15" fill="rgb(215,223,47)"/><text x="44.5755%" y="351.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.64%)</title><rect x="44.5396%" y="325" width="0.6424%" height="15" fill="rgb(248,225,23)"/><text x="44.7896%" y="335.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.43%)</title><rect x="44.7537%" y="309" width="0.4283%" height="15" fill="rgb(250,108,0)"/><text x="45.0037%" y="319.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.43%)</title><rect x="44.7537%" y="293" width="0.4283%" height="15" fill="rgb(228,208,7)"/><text x="45.0037%" y="303.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.43%)</title><rect x="44.7537%" y="277" width="0.4283%" height="15" fill="rgb(244,45,10)"/><text x="45.0037%" y="287.50"></text></g><g><title>std::memchr::memrchr (2 samples, 0.43%)</title><rect x="44.7537%" y="261" width="0.4283%" height="15" fill="rgb(207,125,25)"/><text x="45.0037%" y="271.50"></text></g><g><title>std::sys::unix::memchr::memrchr (2 samples, 0.43%)</title><rect x="44.7537%" y="245" width="0.4283%" height="15" fill="rgb(210,195,18)"/><text x="45.0037%" y="255.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (2 samples, 0.43%)</title><rect x="44.7537%" y="229" width="0.4283%" height="15" fill="rgb(249,80,12)"/><text x="45.0037%" y="239.50"></text></g><g><title>__memrchr_avx2 (2 samples, 0.43%)</title><rect x="44.7537%" y="213" width="0.4283%" height="15" fill="rgb(221,65,9)"/><text x="45.0037%" y="223.50"></text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (81 samples, 17.34%)</title><rect x="44.1113%" y="389" width="17.3448%" height="15" fill="rgb(235,49,36)"/><text x="44.3613%" y="399.50">&lt;std::io::stdio::Stdout as ..</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (81 samples, 17.34%)</title><rect x="44.1113%" y="373" width="17.3448%" height="15" fill="rgb(225,32,20)"/><text x="44.3613%" y="383.50">&lt;&amp;std::io::stdio::Stdout as..</text></g><g><title>std::io::stdio::Stdout::lock (76 samples, 16.27%)</title><rect x="45.1820%" y="357" width="16.2741%" height="15" fill="rgb(215,141,46)"/><text x="45.4320%" y="367.50">std::io::stdio::Stdout::l..</text></g><g><title>std::sys_common::remutex::ReentrantMutex&lt;T&gt;::lock (76 samples, 16.27%)</title><rect x="45.1820%" y="341" width="16.2741%" height="15" fill="rgb(250,160,47)"/><text x="45.4320%" y="351.50">std::sys_common::remutex:..</text></g><g><title>std::sys::unix::mutex::ReentrantMutex::lock (76 samples, 16.27%)</title><rect x="45.1820%" y="325" width="16.2741%" height="15" fill="rgb(216,222,40)"/><text x="45.4320%" y="335.50">std::sys::unix::mutex::Re..</text></g><g><title>__GI___pthread_mutex_lock (76 samples, 16.27%)</title><rect x="45.1820%" y="309" width="16.2741%" height="15" fill="rgb(234,217,39)"/><text x="45.4320%" y="319.50">__GI___pthread_mutex_lock</text></g><g><title>__lll_lock_wait (76 samples, 16.27%)</title><rect x="45.1820%" y="293" width="16.2741%" height="15" fill="rgb(207,178,40)"/><text x="45.4320%" y="303.50">__lll_lock_wait</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (3 samples, 0.64%)</title><rect x="61.6702%" y="245" width="0.6424%" height="15" fill="rgb(221,136,13)"/><text x="61.9202%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (3 samples, 0.64%)</title><rect x="61.6702%" y="229" width="0.6424%" height="15" fill="rgb(249,199,10)"/><text x="61.9202%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (3 samples, 0.64%)</title><rect x="61.6702%" y="213" width="0.6424%" height="15" fill="rgb(249,222,13)"/><text x="61.9202%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (3 samples, 0.64%)</title><rect x="61.6702%" y="197" width="0.6424%" height="15" fill="rgb(244,185,38)"/><text x="61.9202%" y="207.50"></text></g><g><title>alloc::raw_vec::finish_grow (3 samples, 0.64%)</title><rect x="61.6702%" y="181" width="0.6424%" height="15" fill="rgb(236,202,9)"/><text x="61.9202%" y="191.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (3 samples, 0.64%)</title><rect x="61.6702%" y="165" width="0.6424%" height="15" fill="rgb(250,229,37)"/><text x="61.9202%" y="175.50"></text></g><g><title>alloc::alloc::Global::grow_impl (3 samples, 0.64%)</title><rect x="61.6702%" y="149" width="0.6424%" height="15" fill="rgb(206,174,23)"/><text x="61.9202%" y="159.50"></text></g><g><title>alloc::alloc::realloc (3 samples, 0.64%)</title><rect x="61.6702%" y="133" width="0.6424%" height="15" fill="rgb(211,33,43)"/><text x="61.9202%" y="143.50"></text></g><g><title>__GI___libc_realloc (3 samples, 0.64%)</title><rect x="61.6702%" y="117" width="0.6424%" height="15" fill="rgb(245,58,50)"/><text x="61.9202%" y="127.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (5 samples, 1.07%)</title><rect x="61.6702%" y="341" width="1.0707%" height="15" fill="rgb(244,68,36)"/><text x="61.9202%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (5 samples, 1.07%)</title><rect x="61.6702%" y="325" width="1.0707%" height="15" fill="rgb(232,229,15)"/><text x="61.9202%" y="335.50"></text></g><g><title>alloc::string::String::push_str (5 samples, 1.07%)</title><rect x="61.6702%" y="309" width="1.0707%" height="15" fill="rgb(254,30,23)"/><text x="61.9202%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_from_slice (5 samples, 1.07%)</title><rect x="61.6702%" y="293" width="1.0707%" height="15" fill="rgb(235,160,14)"/><text x="61.9202%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (5 samples, 1.07%)</title><rect x="61.6702%" y="277" width="1.0707%" height="15" fill="rgb(212,155,44)"/><text x="61.9202%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::append_elements (5 samples, 1.07%)</title><rect x="61.6702%" y="261" width="1.0707%" height="15" fill="rgb(226,2,50)"/><text x="61.9202%" y="271.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.43%)</title><rect x="62.3126%" y="245" width="0.4283%" height="15" fill="rgb(234,177,6)"/><text x="62.5626%" y="255.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.43%)</title><rect x="62.3126%" y="229" width="0.4283%" height="15" fill="rgb(217,24,9)"/><text x="62.5626%" y="239.50"></text></g><g><title>alloc::fmt::format (7 samples, 1.50%)</title><rect x="61.4561%" y="389" width="1.4989%" height="15" fill="rgb(220,13,46)"/><text x="61.7061%" y="399.50"></text></g><g><title>core::fmt::Write::write_fmt (7 samples, 1.50%)</title><rect x="61.4561%" y="373" width="1.4989%" height="15" fill="rgb(239,221,27)"/><text x="61.7061%" y="383.50"></text></g><g><title>core::fmt::write (7 samples, 1.50%)</title><rect x="61.4561%" y="357" width="1.4989%" height="15" fill="rgb(222,198,25)"/><text x="61.7061%" y="367.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for u64&gt;::fmt (1 samples, 0.21%)</title><rect x="62.7409%" y="341" width="0.2141%" height="15" fill="rgb(211,99,13)"/><text x="62.9909%" y="351.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (1 samples, 0.21%)</title><rect x="62.7409%" y="325" width="0.2141%" height="15" fill="rgb(232,111,31)"/><text x="62.9909%" y="335.50"></text></g><g><title>core::fmt::Formatter::pad_integral (1 samples, 0.21%)</title><rect x="62.7409%" y="309" width="0.2141%" height="15" fill="rgb(245,82,37)"/><text x="62.9909%" y="319.50"></text></g><g><title>__GI___libc_free (2 samples, 0.43%)</title><rect x="62.9550%" y="293" width="0.4283%" height="15" fill="rgb(227,149,46)"/><text x="63.2050%" y="303.50"></text></g><g><title>_int_free (1 samples, 0.21%)</title><rect x="63.1692%" y="277" width="0.2141%" height="15" fill="rgb(218,36,50)"/><text x="63.4192%" y="287.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.64%)</title><rect x="62.9550%" y="389" width="0.6424%" height="15" fill="rgb(226,80,48)"/><text x="63.2050%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.64%)</title><rect x="62.9550%" y="373" width="0.6424%" height="15" fill="rgb(238,224,15)"/><text x="63.2050%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (3 samples, 0.64%)</title><rect x="62.9550%" y="357" width="0.6424%" height="15" fill="rgb(241,136,10)"/><text x="63.2050%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.64%)</title><rect x="62.9550%" y="341" width="0.6424%" height="15" fill="rgb(208,32,45)"/><text x="63.2050%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (3 samples, 0.64%)</title><rect x="62.9550%" y="325" width="0.6424%" height="15" fill="rgb(207,135,9)"/><text x="63.2050%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.64%)</title><rect x="62.9550%" y="309" width="0.6424%" height="15" fill="rgb(206,86,44)"/><text x="63.2050%" y="319.50"></text></g><g><title>__rust_dealloc (1 samples, 0.21%)</title><rect x="63.3833%" y="293" width="0.2141%" height="15" fill="rgb(245,177,15)"/><text x="63.6333%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="63.5974%" y="373" width="0.2141%" height="15" fill="rgb(206,64,50)"/><text x="63.8474%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="63.5974%" y="357" width="0.2141%" height="15" fill="rgb(234,36,40)"/><text x="63.8474%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="63.5974%" y="341" width="0.2141%" height="15" fill="rgb(213,64,8)"/><text x="63.8474%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="63.5974%" y="325" width="0.2141%" height="15" fill="rgb(210,75,36)"/><text x="63.8474%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.21%)</title><rect x="63.5974%" y="309" width="0.2141%" height="15" fill="rgb(229,88,21)"/><text x="63.8474%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="63.5974%" y="293" width="0.2141%" height="15" fill="rgb(252,204,47)"/><text x="63.8474%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.21%)</title><rect x="63.5974%" y="277" width="0.2141%" height="15" fill="rgb(208,77,27)"/><text x="63.8474%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="63.5974%" y="261" width="0.2141%" height="15" fill="rgb(221,76,26)"/><text x="63.8474%" y="271.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="63.5974%" y="245" width="0.2141%" height="15" fill="rgb(225,139,18)"/><text x="63.8474%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.21%)</title><rect x="63.5974%" y="229" width="0.2141%" height="15" fill="rgb(230,137,11)"/><text x="63.8474%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="63.8116%" y="373" width="0.2141%" height="15" fill="rgb(212,28,1)"/><text x="64.0616%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="63.8116%" y="357" width="0.2141%" height="15" fill="rgb(248,164,17)"/><text x="64.0616%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="63.8116%" y="341" width="0.2141%" height="15" fill="rgb(222,171,42)"/><text x="64.0616%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.21%)</title><rect x="63.8116%" y="325" width="0.2141%" height="15" fill="rgb(243,84,45)"/><text x="64.0616%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.21%)</title><rect x="63.8116%" y="309" width="0.2141%" height="15" fill="rgb(252,49,23)"/><text x="64.0616%" y="319.50"></text></g><g><title>__GI___libc_free (1 samples, 0.21%)</title><rect x="63.8116%" y="293" width="0.2141%" height="15" fill="rgb(215,19,7)"/><text x="64.0616%" y="303.50"></text></g><g><title>_int_free (1 samples, 0.21%)</title><rect x="63.8116%" y="277" width="0.2141%" height="15" fill="rgb(238,81,41)"/><text x="64.0616%" y="287.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.21%)</title><rect x="64.0257%" y="373" width="0.2141%" height="15" fill="rgb(210,199,37)"/><text x="64.2757%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 7.28%)</title><rect x="64.8822%" y="181" width="7.2805%" height="15" fill="rgb(244,192,49)"/><text x="65.1322%" y="191.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::find (34 samples, 7.28%)</title><rect x="64.8822%" y="165" width="7.2805%" height="15" fill="rgb(226,211,11)"/><text x="65.1322%" y="175.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 7.28%)</title><rect x="64.8822%" y="149" width="7.2805%" height="15" fill="rgb(236,162,54)"/><text x="65.1322%" y="159.50">&lt;core::ite..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 7.28%)</title><rect x="64.8822%" y="133" width="7.2805%" height="15" fill="rgb(220,229,9)"/><text x="65.1322%" y="143.50">&lt;core::ite..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (34 samples, 7.28%)</title><rect x="64.8822%" y="117" width="7.2805%" height="15" fill="rgb(250,87,22)"/><text x="65.1322%" y="127.50">&lt;core::ite..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (34 samples, 7.28%)</title><rect x="64.8822%" y="101" width="7.2805%" height="15" fill="rgb(239,43,17)"/><text x="65.1322%" y="111.50">core::iter..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (34 samples, 7.28%)</title><rect x="64.8822%" y="85" width="7.2805%" height="15" fill="rgb(231,177,25)"/><text x="65.1322%" y="95.50">&lt;core::ite..</text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (32 samples, 6.85%)</title><rect x="65.3105%" y="69" width="6.8522%" height="15" fill="rgb(219,179,1)"/><text x="65.5605%" y="79.50">core::ite..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (31 samples, 6.64%)</title><rect x="65.5246%" y="53" width="6.6381%" height="15" fill="rgb(238,219,53)"/><text x="65.7746%" y="63.50">&lt;alloc::v..</text></g><g><title>hex::val (17 samples, 3.64%)</title><rect x="68.5225%" y="37" width="3.6403%" height="15" fill="rgb(232,167,36)"/><text x="68.7725%" y="47.50">hex:..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.21%)</title><rect x="72.1627%" y="181" width="0.2141%" height="15" fill="rgb(244,19,51)"/><text x="72.4127%" y="191.50"></text></g><g><title>__lll_lock_wait_private (20 samples, 4.28%)</title><rect x="76.2313%" y="37" width="4.2827%" height="15" fill="rgb(224,6,22)"/><text x="76.4813%" y="47.50">__lll..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (39 samples, 8.35%)</title><rect x="72.3769%" y="181" width="8.3512%" height="15" fill="rgb(224,145,5)"/><text x="72.6269%" y="191.50">alloc::vec::..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (39 samples, 8.35%)</title><rect x="72.3769%" y="165" width="8.3512%" height="15" fill="rgb(234,130,49)"/><text x="72.6269%" y="175.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (39 samples, 8.35%)</title><rect x="72.3769%" y="149" width="8.3512%" height="15" fill="rgb(254,6,2)"/><text x="72.6269%" y="159.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (39 samples, 8.35%)</title><rect x="72.3769%" y="133" width="8.3512%" height="15" fill="rgb(208,96,46)"/><text x="72.6269%" y="143.50">alloc::raw_v..</text></g><g><title>alloc::raw_vec::finish_grow (39 samples, 8.35%)</title><rect x="72.3769%" y="117" width="8.3512%" height="15" fill="rgb(239,3,39)"/><text x="72.6269%" y="127.50">alloc::raw_v..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (39 samples, 8.35%)</title><rect x="72.3769%" y="101" width="8.3512%" height="15" fill="rgb(233,210,1)"/><text x="72.6269%" y="111.50">&lt;alloc::allo..</text></g><g><title>alloc::alloc::Global::grow_impl (39 samples, 8.35%)</title><rect x="72.3769%" y="85" width="8.3512%" height="15" fill="rgb(244,137,37)"/><text x="72.6269%" y="95.50">alloc::alloc..</text></g><g><title>alloc::alloc::realloc (39 samples, 8.35%)</title><rect x="72.3769%" y="69" width="8.3512%" height="15" fill="rgb(240,136,2)"/><text x="72.6269%" y="79.50">alloc::alloc..</text></g><g><title>__GI___libc_realloc (38 samples, 8.14%)</title><rect x="72.5910%" y="53" width="8.1370%" height="15" fill="rgb(239,18,37)"/><text x="72.8410%" y="63.50">__GI___libc..</text></g><g><title>_int_realloc (1 samples, 0.21%)</title><rect x="80.5139%" y="37" width="0.2141%" height="15" fill="rgb(218,185,22)"/><text x="80.7639%" y="47.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (81 samples, 17.34%)</title><rect x="64.4540%" y="213" width="17.3448%" height="15" fill="rgb(225,218,4)"/><text x="64.7040%" y="223.50">&lt;alloc::vec::Vec&lt;T&gt; as allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (81 samples, 17.34%)</title><rect x="64.4540%" y="197" width="17.3448%" height="15" fill="rgb(230,182,32)"/><text x="64.7040%" y="207.50">alloc::vec::Vec&lt;T&gt;::extend_..</text></g><g><title>core::ptr::write (5 samples, 1.07%)</title><rect x="80.7281%" y="181" width="1.0707%" height="15" fill="rgb(242,56,43)"/><text x="80.9781%" y="191.50"></text></g><g><title>hex::decode (83 samples, 17.77%)</title><rect x="64.2398%" y="373" width="17.7730%" height="15" fill="rgb(233,99,24)"/><text x="64.4898%" y="383.50">hex::decode</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (83 samples, 17.77%)</title><rect x="64.2398%" y="357" width="17.7730%" height="15" fill="rgb(234,209,42)"/><text x="64.4898%" y="367.50">&lt;alloc::vec::Vec&lt;u8&gt; as hex:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (83 samples, 17.77%)</title><rect x="64.2398%" y="341" width="17.7730%" height="15" fill="rgb(227,7,12)"/><text x="64.4898%" y="351.50">core::iter::traits::iterator..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (83 samples, 17.77%)</title><rect x="64.2398%" y="325" width="17.7730%" height="15" fill="rgb(245,203,43)"/><text x="64.4898%" y="335.50">&lt;core::result::Result&lt;V,E&gt; a..</text></g><g><title>core::iter::adapters::process_results (83 samples, 17.77%)</title><rect x="64.2398%" y="309" width="17.7730%" height="15" fill="rgb(238,205,33)"/><text x="64.4898%" y="319.50">core::iter::adapters::proces..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (83 samples, 17.77%)</title><rect x="64.2398%" y="293" width="17.7730%" height="15" fill="rgb(231,56,7)"/><text x="64.4898%" y="303.50">&lt;core::result::Result&lt;V,E&gt; a..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (83 samples, 17.77%)</title><rect x="64.2398%" y="277" width="17.7730%" height="15" fill="rgb(244,186,29)"/><text x="64.4898%" y="287.50">core::iter::traits::iterator..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (83 samples, 17.77%)</title><rect x="64.2398%" y="261" width="17.7730%" height="15" fill="rgb(234,111,31)"/><text x="64.4898%" y="271.50">&lt;alloc::vec::Vec&lt;T&gt; as core:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (82 samples, 17.56%)</title><rect x="64.4540%" y="245" width="17.5589%" height="15" fill="rgb(241,149,10)"/><text x="64.7040%" y="255.50">&lt;alloc::vec::Vec&lt;T&gt; as allo..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (82 samples, 17.56%)</title><rect x="64.4540%" y="229" width="17.5589%" height="15" fill="rgb(249,206,44)"/><text x="64.7040%" y="239.50">&lt;alloc::vec::Vec&lt;T&gt; as allo..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="81.7987%" y="213" width="0.2141%" height="15" fill="rgb(251,153,30)"/><text x="82.0487%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.21%)</title><rect x="81.7987%" y="197" width="0.2141%" height="15" fill="rgb(239,152,38)"/><text x="82.0487%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="81.7987%" y="181" width="0.2141%" height="15" fill="rgb(249,139,47)"/><text x="82.0487%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="81.7987%" y="165" width="0.2141%" height="15" fill="rgb(244,64,35)"/><text x="82.0487%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="81.7987%" y="149" width="0.2141%" height="15" fill="rgb(216,46,15)"/><text x="82.0487%" y="159.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.21%)</title><rect x="81.7987%" y="133" width="0.2141%" height="15" fill="rgb(250,74,19)"/><text x="82.0487%" y="143.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1 samples, 0.21%)</title><rect x="81.7987%" y="117" width="0.2141%" height="15" fill="rgb(249,42,33)"/><text x="82.0487%" y="127.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (1 samples, 0.21%)</title><rect x="81.7987%" y="101" width="0.2141%" height="15" fill="rgb(242,149,17)"/><text x="82.0487%" y="111.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (1 samples, 0.21%)</title><rect x="81.7987%" y="85" width="0.2141%" height="15" fill="rgb(244,29,21)"/><text x="82.0487%" y="95.50"></text></g><g><title>hex::val (1 samples, 0.21%)</title><rect x="81.7987%" y="69" width="0.2141%" height="15" fill="rgb(220,130,37)"/><text x="82.0487%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="82.2270%" y="229" width="0.2141%" height="15" fill="rgb(211,67,2)"/><text x="82.4770%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.21%)</title><rect x="82.2270%" y="213" width="0.2141%" height="15" fill="rgb(235,68,52)"/><text x="82.4770%" y="223.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (5 samples, 1.07%)</title><rect x="82.0128%" y="245" width="1.0707%" height="15" fill="rgb(246,142,3)"/><text x="82.2628%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.64%)</title><rect x="82.4411%" y="229" width="0.6424%" height="15" fill="rgb(241,25,7)"/><text x="82.6911%" y="239.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (3 samples, 0.64%)</title><rect x="82.4411%" y="213" width="0.6424%" height="15" fill="rgb(242,119,39)"/><text x="82.6911%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.21%)</title><rect x="83.7259%" y="181" width="0.2141%" height="15" fill="rgb(241,98,45)"/><text x="83.9759%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.21%)</title><rect x="83.7259%" y="165" width="0.2141%" height="15" fill="rgb(254,28,30)"/><text x="83.9759%" y="175.50"></text></g><g><title>lab4::checksum::Checksum::update (98 samples, 20.99%)</title><rect x="63.5974%" y="389" width="20.9850%" height="15" fill="rgb(241,142,54)"/><text x="63.8474%" y="399.50">lab4::checksum::Checksum::update</text></g><g><title>hex::encode (12 samples, 2.57%)</title><rect x="82.0128%" y="373" width="2.5696%" height="15" fill="rgb(222,85,15)"/><text x="82.2628%" y="383.50">he..</text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (12 samples, 2.57%)</title><rect x="82.0128%" y="357" width="2.5696%" height="15" fill="rgb(210,85,47)"/><text x="82.2628%" y="367.50">&lt;T..</text></g><g><title>hex::encode_to_iter (12 samples, 2.57%)</title><rect x="82.0128%" y="341" width="2.5696%" height="15" fill="rgb(224,206,25)"/><text x="82.2628%" y="351.50">he..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (12 samples, 2.57%)</title><rect x="82.0128%" y="325" width="2.5696%" height="15" fill="rgb(243,201,19)"/><text x="82.2628%" y="335.50">co..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (12 samples, 2.57%)</title><rect x="82.0128%" y="309" width="2.5696%" height="15" fill="rgb(236,59,4)"/><text x="82.2628%" y="319.50">&lt;a..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (12 samples, 2.57%)</title><rect x="82.0128%" y="293" width="2.5696%" height="15" fill="rgb(254,179,45)"/><text x="82.2628%" y="303.50">&lt;a..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (12 samples, 2.57%)</title><rect x="82.0128%" y="277" width="2.5696%" height="15" fill="rgb(226,14,10)"/><text x="82.2628%" y="287.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (12 samples, 2.57%)</title><rect x="82.0128%" y="261" width="2.5696%" height="15" fill="rgb(244,27,41)"/><text x="82.2628%" y="271.50">co..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 1.50%)</title><rect x="83.0835%" y="245" width="1.4989%" height="15" fill="rgb(235,35,32)"/><text x="83.3335%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (7 samples, 1.50%)</title><rect x="83.0835%" y="229" width="1.4989%" height="15" fill="rgb(218,68,31)"/><text x="83.3335%" y="239.50"></text></g><g><title>alloc::string::String::push (7 samples, 1.50%)</title><rect x="83.0835%" y="213" width="1.4989%" height="15" fill="rgb(207,120,37)"/><text x="83.3335%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (7 samples, 1.50%)</title><rect x="83.0835%" y="197" width="1.4989%" height="15" fill="rgb(227,98,0)"/><text x="83.3335%" y="207.50"></text></g><g><title>core::ptr::write (3 samples, 0.64%)</title><rect x="83.9400%" y="181" width="0.6424%" height="15" fill="rgb(207,7,3)"/><text x="84.1900%" y="191.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::Update&gt;::update (3 samples, 0.64%)</title><rect x="84.5824%" y="357" width="0.6424%" height="15" fill="rgb(206,98,19)"/><text x="84.8324%" y="367.50"></text></g><g><title>sha2::sha256::Engine256::update (3 samples, 0.64%)</title><rect x="84.5824%" y="341" width="0.6424%" height="15" fill="rgb(217,5,26)"/><text x="84.8324%" y="351.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::input_blocks (3 samples, 0.64%)</title><rect x="84.5824%" y="325" width="0.6424%" height="15" fill="rgb(235,190,38)"/><text x="84.8324%" y="335.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (3 samples, 0.64%)</title><rect x="84.5824%" y="309" width="0.6424%" height="15" fill="rgb(247,86,24)"/><text x="84.8324%" y="319.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.64%)</title><rect x="84.5824%" y="293" width="0.6424%" height="15" fill="rgb(205,101,16)"/><text x="84.8324%" y="303.50"></text></g><g><title>__memmove_avx_unaligned_erms (3 samples, 0.64%)</title><rect x="84.5824%" y="277" width="0.6424%" height="15" fill="rgb(246,168,33)"/><text x="84.8324%" y="287.50"></text></g><g><title>cpuid_bool::LazyBool::unsync_init (1 samples, 0.21%)</title><rect x="85.2248%" y="229" width="0.2141%" height="15" fill="rgb(231,114,1)"/><text x="85.4748%" y="239.50"></text></g><g><title>core::sync::atomic::AtomicU8::load (1 samples, 0.21%)</title><rect x="85.2248%" y="213" width="0.2141%" height="15" fill="rgb(207,184,53)"/><text x="85.4748%" y="223.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.21%)</title><rect x="85.2248%" y="197" width="0.2141%" height="15" fill="rgb(224,95,51)"/><text x="85.4748%" y="207.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.21%)</title><rect x="85.4390%" y="213" width="0.2141%" height="15" fill="rgb(212,188,45)"/><text x="85.6890%" y="223.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.21%)</title><rect x="85.4390%" y="197" width="0.2141%" height="15" fill="rgb(223,154,38)"/><text x="85.6890%" y="207.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.21%)</title><rect x="85.4390%" y="181" width="0.2141%" height="15" fill="rgb(251,22,52)"/><text x="85.6890%" y="191.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::_{{closure}} (1 samples, 0.21%)</title><rect x="85.4390%" y="165" width="0.2141%" height="15" fill="rgb(229,209,22)"/><text x="85.6890%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (1 samples, 0.21%)</title><rect x="85.6531%" y="213" width="0.2141%" height="15" fill="rgb(234,138,34)"/><text x="85.9031%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (1 samples, 0.21%)</title><rect x="85.6531%" y="197" width="0.2141%" height="15" fill="rgb(212,95,11)"/><text x="85.9031%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (1 samples, 0.21%)</title><rect x="85.6531%" y="181" width="0.2141%" height="15" fill="rgb(240,179,47)"/><text x="85.9031%" y="191.50"></text></g><g><title>sha2::sha256::soft::add (1 samples, 0.21%)</title><rect x="85.8672%" y="181" width="0.2141%" height="15" fill="rgb(240,163,11)"/><text x="86.1172%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.21%)</title><rect x="85.8672%" y="165" width="0.2141%" height="15" fill="rgb(236,37,12)"/><text x="86.1172%" y="175.50"></text></g><g><title>sha2::sha256::soft::add (2 samples, 0.43%)</title><rect x="86.0814%" y="165" width="0.4283%" height="15" fill="rgb(232,164,16)"/><text x="86.3314%" y="175.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2 samples, 0.43%)</title><rect x="86.0814%" y="149" width="0.4283%" height="15" fill="rgb(244,205,15)"/><text x="86.3314%" y="159.50"></text></g><g><title>sha2::sha256::soft::or (1 samples, 0.21%)</title><rect x="86.5096%" y="149" width="0.2141%" height="15" fill="rgb(223,117,47)"/><text x="86.7596%" y="159.50"></text></g><g><title>sha2::sha256::soft::sha256msg1 (5 samples, 1.07%)</title><rect x="86.0814%" y="181" width="1.0707%" height="15" fill="rgb(244,107,35)"/><text x="86.3314%" y="191.50"></text></g><g><title>sha2::sha256::soft::sha256msg1::sigma0x4 (3 samples, 0.64%)</title><rect x="86.5096%" y="165" width="0.6424%" height="15" fill="rgb(205,140,8)"/><text x="86.7596%" y="175.50"></text></g><g><title>sha2::sha256::soft::xor (2 samples, 0.43%)</title><rect x="86.7238%" y="149" width="0.4283%" height="15" fill="rgb(228,84,46)"/><text x="86.9738%" y="159.50"></text></g><g><title>sha2::sha256::soft::schedule (8 samples, 1.71%)</title><rect x="85.8672%" y="197" width="1.7131%" height="15" fill="rgb(254,188,9)"/><text x="86.1172%" y="207.50"></text></g><g><title>sha2::sha256::soft::sha256msg2 (2 samples, 0.43%)</title><rect x="87.1520%" y="181" width="0.4283%" height="15" fill="rgb(206,112,54)"/><text x="87.4020%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (2 samples, 0.43%)</title><rect x="88.6510%" y="181" width="0.4283%" height="15" fill="rgb(216,84,49)"/><text x="88.9010%" y="191.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (25 samples, 5.35%)</title><rect x="84.5824%" y="373" width="5.3533%" height="15" fill="rgb(214,194,35)"/><text x="84.8324%" y="383.50">&lt;D as d..</text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (22 samples, 4.71%)</title><rect x="85.2248%" y="357" width="4.7109%" height="15" fill="rgb(249,28,3)"/><text x="85.4748%" y="367.50">diges..</text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (22 samples, 4.71%)</title><rect x="85.2248%" y="341" width="4.7109%" height="15" fill="rgb(222,56,52)"/><text x="85.4748%" y="351.50">&lt;D as..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (22 samples, 4.71%)</title><rect x="85.2248%" y="325" width="4.7109%" height="15" fill="rgb(245,217,50)"/><text x="85.4748%" y="335.50">&lt;sha2..</text></g><g><title>sha2::sha256::Engine256::finish (22 samples, 4.71%)</title><rect x="85.2248%" y="309" width="4.7109%" height="15" fill="rgb(213,201,24)"/><text x="85.4748%" y="319.50">sha2:..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (22 samples, 4.71%)</title><rect x="85.2248%" y="293" width="4.7109%" height="15" fill="rgb(248,116,28)"/><text x="85.4748%" y="303.50">block..</text></g><g><title>sha2::sha256::Engine256::finish::_{{closure}} (22 samples, 4.71%)</title><rect x="85.2248%" y="277" width="4.7109%" height="15" fill="rgb(219,72,43)"/><text x="85.4748%" y="287.50">sha2:..</text></g><g><title>sha2::sha256::compress256 (22 samples, 4.71%)</title><rect x="85.2248%" y="261" width="4.7109%" height="15" fill="rgb(209,138,14)"/><text x="85.4748%" y="271.50">sha2:..</text></g><g><title>sha2::sha256::x86::compress (22 samples, 4.71%)</title><rect x="85.2248%" y="245" width="4.7109%" height="15" fill="rgb(222,18,33)"/><text x="85.4748%" y="255.50">sha2:..</text></g><g><title>sha2::sha256::soft::compress (21 samples, 4.50%)</title><rect x="85.4390%" y="229" width="4.4968%" height="15" fill="rgb(213,199,7)"/><text x="85.6890%" y="239.50">sha2:..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (19 samples, 4.07%)</title><rect x="85.8672%" y="213" width="4.0685%" height="15" fill="rgb(250,110,10)"/><text x="86.1172%" y="223.50">sha2..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (11 samples, 2.36%)</title><rect x="87.5803%" y="197" width="2.3555%" height="15" fill="rgb(248,123,6)"/><text x="87.8303%" y="207.50">s..</text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (4 samples, 0.86%)</title><rect x="89.0792%" y="181" width="0.8565%" height="15" fill="rgb(206,91,31)"/><text x="89.3292%" y="191.50"></text></g><g><title>alloc::string::String::reserve (1 samples, 0.21%)</title><rect x="89.9358%" y="277" width="0.2141%" height="15" fill="rgb(211,154,13)"/><text x="90.1858%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.21%)</title><rect x="89.9358%" y="261" width="0.2141%" height="15" fill="rgb(225,148,7)"/><text x="90.1858%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.21%)</title><rect x="89.9358%" y="245" width="0.2141%" height="15" fill="rgb(220,160,43)"/><text x="90.1858%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.21%)</title><rect x="89.9358%" y="229" width="0.2141%" height="15" fill="rgb(213,52,39)"/><text x="90.1858%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.21%)</title><rect x="89.9358%" y="213" width="0.2141%" height="15" fill="rgb(243,137,7)"/><text x="90.1858%" y="223.50"></text></g><g><title>core::cmp::max (1 samples, 0.21%)</title><rect x="89.9358%" y="197" width="0.2141%" height="15" fill="rgb(230,79,13)"/><text x="90.1858%" y="207.50"></text></g><g><title>core::cmp::Ord::max (1 samples, 0.21%)</title><rect x="89.9358%" y="181" width="0.2141%" height="15" fill="rgb(247,105,23)"/><text x="90.1858%" y="191.50"></text></g><g><title>core::cmp::max_by (1 samples, 0.21%)</title><rect x="89.9358%" y="165" width="0.2141%" height="15" fill="rgb(223,179,41)"/><text x="90.1858%" y="175.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="90.1499%" y="229" width="0.2141%" height="15" fill="rgb(218,9,34)"/><text x="90.3999%" y="239.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.21%)</title><rect x="90.1499%" y="213" width="0.2141%" height="15" fill="rgb(222,106,8)"/><text x="90.3999%" y="223.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.43%)</title><rect x="90.1499%" y="245" width="0.4283%" height="15" fill="rgb(211,220,0)"/><text x="90.3999%" y="255.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.21%)</title><rect x="90.3640%" y="229" width="0.2141%" height="15" fill="rgb(229,52,16)"/><text x="90.6140%" y="239.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1 samples, 0.21%)</title><rect x="90.3640%" y="213" width="0.2141%" height="15" fill="rgb(212,155,18)"/><text x="90.6140%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.21%)</title><rect x="90.7923%" y="181" width="0.2141%" height="15" fill="rgb(242,21,14)"/><text x="91.0423%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.21%)</title><rect x="90.7923%" y="165" width="0.2141%" height="15" fill="rgb(222,19,48)"/><text x="91.0423%" y="175.50"></text></g><g><title>std::panic::catch_unwind (321 samples, 68.74%)</title><rect x="23.1263%" y="533" width="68.7366%" height="15" fill="rgb(232,45,27)"/><text x="23.3763%" y="543.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (321 samples, 68.74%)</title><rect x="23.1263%" y="517" width="68.7366%" height="15" fill="rgb(249,103,42)"/><text x="23.3763%" y="527.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (321 samples, 68.74%)</title><rect x="23.1263%" y="501" width="68.7366%" height="15" fill="rgb(246,81,33)"/><text x="23.3763%" y="511.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (321 samples, 68.74%)</title><rect x="23.1263%" y="485" width="68.7366%" height="15" fill="rgb(252,33,42)"/><text x="23.3763%" y="495.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (321 samples, 68.74%)</title><rect x="23.1263%" y="469" width="68.7366%" height="15" fill="rgb(209,212,41)"/><text x="23.3763%" y="479.50">std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (321 samples, 68.74%)</title><rect x="23.1263%" y="453" width="68.7366%" height="15" fill="rgb(207,154,6)"/><text x="23.3763%" y="463.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::hackathon::_{{closure}} (321 samples, 68.74%)</title><rect x="23.1263%" y="437" width="68.7366%" height="15" fill="rgb(223,64,47)"/><text x="23.3763%" y="447.50">lab4::hackathon::_{{closure}}</text></g><g><title>lab4::student::Student::run (230 samples, 49.25%)</title><rect x="42.6124%" y="421" width="49.2505%" height="15" fill="rgb(211,161,38)"/><text x="42.8624%" y="431.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (223 samples, 47.75%)</title><rect x="44.1113%" y="405" width="47.7516%" height="15" fill="rgb(219,138,40)"/><text x="44.3613%" y="415.50">lab4::student::Student::build_idea</text></g><g><title>lab4::checksum::Checksum::with_sha256 (34 samples, 7.28%)</title><rect x="84.5824%" y="389" width="7.2805%" height="15" fill="rgb(241,228,46)"/><text x="84.8324%" y="399.50">lab4::chec..</text></g><g><title>hex::encode (9 samples, 1.93%)</title><rect x="89.9358%" y="373" width="1.9272%" height="15" fill="rgb(223,209,38)"/><text x="90.1858%" y="383.50">h..</text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (9 samples, 1.93%)</title><rect x="89.9358%" y="357" width="1.9272%" height="15" fill="rgb(236,164,45)"/><text x="90.1858%" y="367.50">&lt;..</text></g><g><title>hex::encode_to_iter (9 samples, 1.93%)</title><rect x="89.9358%" y="341" width="1.9272%" height="15" fill="rgb(231,15,5)"/><text x="90.1858%" y="351.50">h..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (9 samples, 1.93%)</title><rect x="89.9358%" y="325" width="1.9272%" height="15" fill="rgb(252,35,15)"/><text x="90.1858%" y="335.50">c..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (9 samples, 1.93%)</title><rect x="89.9358%" y="309" width="1.9272%" height="15" fill="rgb(248,181,18)"/><text x="90.1858%" y="319.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (9 samples, 1.93%)</title><rect x="89.9358%" y="293" width="1.9272%" height="15" fill="rgb(233,39,42)"/><text x="90.1858%" y="303.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (8 samples, 1.71%)</title><rect x="90.1499%" y="277" width="1.7131%" height="15" fill="rgb(238,110,33)"/><text x="90.3999%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (8 samples, 1.71%)</title><rect x="90.1499%" y="261" width="1.7131%" height="15" fill="rgb(233,195,10)"/><text x="90.3999%" y="271.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (6 samples, 1.28%)</title><rect x="90.5782%" y="245" width="1.2848%" height="15" fill="rgb(254,105,3)"/><text x="90.8282%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (6 samples, 1.28%)</title><rect x="90.5782%" y="229" width="1.2848%" height="15" fill="rgb(221,225,9)"/><text x="90.8282%" y="239.50"></text></g><g><title>alloc::string::String::push (6 samples, 1.28%)</title><rect x="90.5782%" y="213" width="1.2848%" height="15" fill="rgb(224,227,45)"/><text x="90.8282%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (6 samples, 1.28%)</title><rect x="90.5782%" y="197" width="1.2848%" height="15" fill="rgb(229,198,43)"/><text x="90.8282%" y="207.50"></text></g><g><title>core::ptr::write (4 samples, 0.86%)</title><rect x="91.0064%" y="181" width="0.8565%" height="15" fill="rgb(206,209,35)"/><text x="91.2564%" y="191.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.21%)</title><rect x="91.8630%" y="501" width="0.2141%" height="15" fill="rgb(245,195,53)"/><text x="92.1130%" y="511.50"></text></g><g><title>tcache_init (1 samples, 0.21%)</title><rect x="91.8630%" y="485" width="0.2141%" height="15" fill="rgb(240,92,26)"/><text x="92.1130%" y="495.50"></text></g><g><title>tcache_init (1 samples, 0.21%)</title><rect x="91.8630%" y="469" width="0.2141%" height="15" fill="rgb(207,40,23)"/><text x="92.1130%" y="479.50"></text></g><g><title>arena_get2 (1 samples, 0.21%)</title><rect x="91.8630%" y="453" width="0.2141%" height="15" fill="rgb(223,111,35)"/><text x="92.1130%" y="463.50"></text></g><g><title>arena_get2 (1 samples, 0.21%)</title><rect x="91.8630%" y="437" width="0.2141%" height="15" fill="rgb(229,147,28)"/><text x="92.1130%" y="447.50"></text></g><g><title>_int_new_arena (1 samples, 0.21%)</title><rect x="91.8630%" y="421" width="0.2141%" height="15" fill="rgb(211,29,28)"/><text x="92.1130%" y="431.50"></text></g><g><title>new_heap (1 samples, 0.21%)</title><rect x="91.8630%" y="405" width="0.2141%" height="15" fill="rgb(228,72,33)"/><text x="92.1130%" y="415.50"></text></g><g><title>std::sys::unix::thread::guard::current (2 samples, 0.43%)</title><rect x="91.8630%" y="533" width="0.4283%" height="15" fill="rgb(205,214,31)"/><text x="92.1130%" y="543.50"></text></g><g><title>pthread_getattr_np (2 samples, 0.43%)</title><rect x="91.8630%" y="517" width="0.4283%" height="15" fill="rgb(224,111,15)"/><text x="92.1130%" y="527.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.21%)</title><rect x="92.0771%" y="501" width="0.2141%" height="15" fill="rgb(253,21,26)"/><text x="92.3271%" y="511.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (325 samples, 69.59%)</title><rect x="23.1263%" y="597" width="69.5931%" height="15" fill="rgb(245,139,43)"/><text x="23.3763%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (325 samples, 69.59%)</title><rect x="23.1263%" y="581" width="69.5931%" height="15" fill="rgb(252,170,7)"/><text x="23.3763%" y="591.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (325 samples, 69.59%)</title><rect x="23.1263%" y="565" width="69.5931%" height="15" fill="rgb(231,118,14)"/><text x="23.3763%" y="575.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (325 samples, 69.59%)</title><rect x="23.1263%" y="549" width="69.5931%" height="15" fill="rgb(238,83,0)"/><text x="23.3763%" y="559.50">std::thread::Builder::spawn_unchecked::_{{closure}}</text></g><g><title>std::thread::Thread::cname (2 samples, 0.43%)</title><rect x="92.2912%" y="533" width="0.4283%" height="15" fill="rgb(221,39,39)"/><text x="92.5412%" y="543.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.21%)</title><rect x="92.7195%" y="565" width="0.2141%" height="15" fill="rgb(222,119,46)"/><text x="92.9695%" y="575.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.21%)</title><rect x="92.7195%" y="549" width="0.2141%" height="15" fill="rgb(222,165,49)"/><text x="92.9695%" y="559.50"></text></g><g><title>__GI___clone (397 samples, 85.01%)</title><rect x="8.1370%" y="645" width="85.0107%" height="15" fill="rgb(219,113,52)"/><text x="8.3870%" y="655.50">__GI___clone</text></g><g><title>start_thread (327 samples, 70.02%)</title><rect x="23.1263%" y="629" width="70.0214%" height="15" fill="rgb(214,7,15)"/><text x="23.3763%" y="639.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (327 samples, 70.02%)</title><rect x="23.1263%" y="613" width="70.0214%" height="15" fill="rgb(235,32,4)"/><text x="23.3763%" y="623.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (2 samples, 0.43%)</title><rect x="92.7195%" y="597" width="0.4283%" height="15" fill="rgb(238,90,54)"/><text x="92.9695%" y="607.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (2 samples, 0.43%)</title><rect x="92.7195%" y="581" width="0.4283%" height="15" fill="rgb(213,208,19)"/><text x="92.9695%" y="591.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (1 samples, 0.21%)</title><rect x="92.9336%" y="565" width="0.2141%" height="15" fill="rgb(233,156,4)"/><text x="93.1836%" y="575.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (1 samples, 0.21%)</title><rect x="92.9336%" y="549" width="0.2141%" height="15" fill="rgb(207,194,5)"/><text x="93.1836%" y="559.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.21%)</title><rect x="92.9336%" y="533" width="0.2141%" height="15" fill="rgb(206,111,30)"/><text x="93.1836%" y="543.50"></text></g><g><title>__GI___sysconf (1 samples, 0.21%)</title><rect x="92.9336%" y="517" width="0.2141%" height="15" fill="rgb(243,70,54)"/><text x="93.1836%" y="527.50"></text></g><g><title>linux_sysconf (1 samples, 0.21%)</title><rect x="92.9336%" y="501" width="0.2141%" height="15" fill="rgb(242,28,8)"/><text x="93.1836%" y="511.50"></text></g><g><title>posix_sysconf (1 samples, 0.21%)</title><rect x="92.9336%" y="485" width="0.2141%" height="15" fill="rgb(219,106,18)"/><text x="93.1836%" y="495.50"></text></g><g><title>__GI___getpagesize (1 samples, 0.21%)</title><rect x="92.9336%" y="469" width="0.2141%" height="15" fill="rgb(244,222,10)"/><text x="93.1836%" y="479.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.43%)</title><rect x="93.1478%" y="645" width="0.4283%" height="15" fill="rgb(236,179,52)"/><text x="93.3978%" y="655.50"></text></g><g><title>__rdl_realloc (1 samples, 0.21%)</title><rect x="93.5760%" y="645" width="0.2141%" height="15" fill="rgb(213,23,39)"/><text x="93.8260%" y="655.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="95.0749%" y="437" width="0.2141%" height="15" fill="rgb(238,48,10)"/><text x="95.3249%" y="447.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="95.0749%" y="421" width="0.2141%" height="15" fill="rgb(251,196,23)"/><text x="95.3249%" y="431.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.21%)</title><rect x="95.0749%" y="405" width="0.2141%" height="15" fill="rgb(250,152,24)"/><text x="95.3249%" y="415.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="95.0749%" y="389" width="0.2141%" height="15" fill="rgb(209,150,17)"/><text x="95.3249%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.21%)</title><rect x="95.0749%" y="373" width="0.2141%" height="15" fill="rgb(234,202,34)"/><text x="95.3249%" y="383.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="95.0749%" y="357" width="0.2141%" height="15" fill="rgb(253,148,53)"/><text x="95.3249%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.21%)</title><rect x="95.0749%" y="341" width="0.2141%" height="15" fill="rgb(218,129,16)"/><text x="95.3249%" y="351.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.21%)</title><rect x="95.0749%" y="325" width="0.2141%" height="15" fill="rgb(216,85,19)"/><text x="95.3249%" y="335.50"></text></g><g><title>__GI___libc_free (1 samples, 0.21%)</title><rect x="95.0749%" y="309" width="0.2141%" height="15" fill="rgb(235,228,7)"/><text x="95.3249%" y="319.50"></text></g><g><title>_int_free (1 samples, 0.21%)</title><rect x="95.0749%" y="293" width="0.2141%" height="15" fill="rgb(245,175,0)"/><text x="95.3249%" y="303.50"></text></g><g><title>malloc_consolidate (1 samples, 0.21%)</title><rect x="95.0749%" y="277" width="0.2141%" height="15" fill="rgb(208,168,36)"/><text x="95.3249%" y="287.50"></text></g><g><title>lab4::checksum::Checksum::update (1 samples, 0.21%)</title><rect x="95.2891%" y="437" width="0.2141%" height="15" fill="rgb(246,171,24)"/><text x="95.5391%" y="447.50"></text></g><g><title>hex::decode (1 samples, 0.21%)</title><rect x="95.2891%" y="421" width="0.2141%" height="15" fill="rgb(215,142,24)"/><text x="95.5391%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (1 samples, 0.21%)</title><rect x="95.2891%" y="405" width="0.2141%" height="15" fill="rgb(250,187,7)"/><text x="95.5391%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="95.2891%" y="389" width="0.2141%" height="15" fill="rgb(228,66,33)"/><text x="95.5391%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="95.2891%" y="373" width="0.2141%" height="15" fill="rgb(234,215,21)"/><text x="95.5391%" y="383.50"></text></g><g><title>core::iter::adapters::process_results (1 samples, 0.21%)</title><rect x="95.2891%" y="357" width="0.2141%" height="15" fill="rgb(222,191,20)"/><text x="95.5391%" y="367.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (1 samples, 0.21%)</title><rect x="95.2891%" y="341" width="0.2141%" height="15" fill="rgb(245,79,54)"/><text x="95.5391%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="95.2891%" y="325" width="0.2141%" height="15" fill="rgb(240,10,37)"/><text x="95.5391%" y="335.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="95.2891%" y="309" width="0.2141%" height="15" fill="rgb(214,192,32)"/><text x="95.5391%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="95.2891%" y="293" width="0.2141%" height="15" fill="rgb(209,36,54)"/><text x="95.5391%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="95.2891%" y="277" width="0.2141%" height="15" fill="rgb(220,10,11)"/><text x="95.5391%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.21%)</title><rect x="95.2891%" y="261" width="0.2141%" height="15" fill="rgb(221,106,17)"/><text x="95.5391%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (1 samples, 0.21%)</title><rect x="95.2891%" y="245" width="0.2141%" height="15" fill="rgb(251,142,44)"/><text x="95.5391%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="95.2891%" y="229" width="0.2141%" height="15" fill="rgb(238,13,15)"/><text x="95.5391%" y="239.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.21%)</title><rect x="95.2891%" y="213" width="0.2141%" height="15" fill="rgb(208,107,27)"/><text x="95.5391%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="95.2891%" y="197" width="0.2141%" height="15" fill="rgb(205,136,37)"/><text x="95.5391%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="95.2891%" y="181" width="0.2141%" height="15" fill="rgb(250,205,27)"/><text x="95.5391%" y="191.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="95.2891%" y="165" width="0.2141%" height="15" fill="rgb(210,80,43)"/><text x="95.5391%" y="175.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.21%)</title><rect x="95.2891%" y="149" width="0.2141%" height="15" fill="rgb(247,160,36)"/><text x="95.5391%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1 samples, 0.21%)</title><rect x="95.2891%" y="133" width="0.2141%" height="15" fill="rgb(234,13,49)"/><text x="95.5391%" y="143.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (1 samples, 0.21%)</title><rect x="95.2891%" y="117" width="0.2141%" height="15" fill="rgb(234,122,0)"/><text x="95.5391%" y="127.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (1 samples, 0.21%)</title><rect x="95.2891%" y="101" width="0.2141%" height="15" fill="rgb(207,146,38)"/><text x="95.5391%" y="111.50"></text></g><g><title>hex::val (1 samples, 0.21%)</title><rect x="95.2891%" y="85" width="0.2141%" height="15" fill="rgb(207,177,25)"/><text x="95.5391%" y="95.50"></text></g><g><title>lab4::read_ideas (2 samples, 0.43%)</title><rect x="95.5032%" y="437" width="0.4283%" height="15" fill="rgb(211,178,42)"/><text x="95.7532%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.43%)</title><rect x="95.5032%" y="421" width="0.4283%" height="15" fill="rgb(230,69,54)"/><text x="95.7532%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.43%)</title><rect x="95.5032%" y="405" width="0.4283%" height="15" fill="rgb(214,135,41)"/><text x="95.7532%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.43%)</title><rect x="95.5032%" y="389" width="0.4283%" height="15" fill="rgb(237,67,25)"/><text x="95.7532%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.43%)</title><rect x="95.5032%" y="373" width="0.4283%" height="15" fill="rgb(222,189,50)"/><text x="95.7532%" y="383.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.43%)</title><rect x="95.5032%" y="357" width="0.4283%" height="15" fill="rgb(245,148,34)"/><text x="95.7532%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (2 samples, 0.43%)</title><rect x="95.5032%" y="341" width="0.4283%" height="15" fill="rgb(222,29,6)"/><text x="95.7532%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.43%)</title><rect x="95.5032%" y="325" width="0.4283%" height="15" fill="rgb(221,189,43)"/><text x="95.7532%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.43%)</title><rect x="95.5032%" y="309" width="0.4283%" height="15" fill="rgb(207,36,27)"/><text x="95.7532%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.43%)</title><rect x="95.5032%" y="293" width="0.4283%" height="15" fill="rgb(217,90,24)"/><text x="95.7532%" y="303.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.43%)</title><rect x="95.5032%" y="277" width="0.4283%" height="15" fill="rgb(224,66,35)"/><text x="95.7532%" y="287.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.43%)</title><rect x="95.5032%" y="261" width="0.4283%" height="15" fill="rgb(221,13,50)"/><text x="95.7532%" y="271.50"></text></g><g><title>lab4::read_ideas::_{{closure}}::_{{closure}} (2 samples, 0.43%)</title><rect x="95.5032%" y="245" width="0.4283%" height="15" fill="rgb(236,68,49)"/><text x="95.7532%" y="255.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.43%)</title><rect x="95.5032%" y="229" width="0.4283%" height="15" fill="rgb(229,146,28)"/><text x="95.7532%" y="239.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.43%)</title><rect x="95.5032%" y="213" width="0.4283%" height="15" fill="rgb(225,31,38)"/><text x="95.7532%" y="223.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.43%)</title><rect x="95.5032%" y="197" width="0.4283%" height="15" fill="rgb(250,208,3)"/><text x="95.7532%" y="207.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.43%)</title><rect x="95.5032%" y="181" width="0.4283%" height="15" fill="rgb(246,54,23)"/><text x="95.7532%" y="191.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.43%)</title><rect x="95.5032%" y="165" width="0.4283%" height="15" fill="rgb(243,76,11)"/><text x="95.7532%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.43%)</title><rect x="95.5032%" y="149" width="0.4283%" height="15" fill="rgb(245,21,50)"/><text x="95.7532%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.43%)</title><rect x="95.5032%" y="133" width="0.4283%" height="15" fill="rgb(228,9,43)"/><text x="95.7532%" y="143.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.43%)</title><rect x="95.5032%" y="117" width="0.4283%" height="15" fill="rgb(208,100,47)"/><text x="95.7532%" y="127.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.43%)</title><rect x="95.5032%" y="101" width="0.4283%" height="15" fill="rgb(232,26,8)"/><text x="95.7532%" y="111.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.43%)</title><rect x="95.5032%" y="85" width="0.4283%" height="15" fill="rgb(216,166,38)"/><text x="95.7532%" y="95.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.43%)</title><rect x="95.5032%" y="69" width="0.4283%" height="15" fill="rgb(251,202,51)"/><text x="95.7532%" y="79.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.43%)</title><rect x="95.5032%" y="53" width="0.4283%" height="15" fill="rgb(254,216,34)"/><text x="95.7532%" y="63.50"></text></g><g><title>__libc_start_main (21 samples, 4.50%)</title><rect x="95.0749%" y="629" width="4.4968%" height="15" fill="rgb(251,32,27)"/><text x="95.3249%" y="639.50">__lib..</text></g><g><title>main (21 samples, 4.50%)</title><rect x="95.0749%" y="613" width="4.4968%" height="15" fill="rgb(208,127,28)"/><text x="95.3249%" y="623.50">main</text></g><g><title>std::rt::lang_start_internal (21 samples, 4.50%)</title><rect x="95.0749%" y="597" width="4.4968%" height="15" fill="rgb(224,137,22)"/><text x="95.3249%" y="607.50">std::..</text></g><g><title>std::panic::catch_unwind (21 samples, 4.50%)</title><rect x="95.0749%" y="581" width="4.4968%" height="15" fill="rgb(254,70,32)"/><text x="95.3249%" y="591.50">std::..</text></g><g><title>std::panicking::try (21 samples, 4.50%)</title><rect x="95.0749%" y="565" width="4.4968%" height="15" fill="rgb(229,75,37)"/><text x="95.3249%" y="575.50">std::..</text></g><g><title>std::panicking::try::do_call (21 samples, 4.50%)</title><rect x="95.0749%" y="549" width="4.4968%" height="15" fill="rgb(252,64,23)"/><text x="95.3249%" y="559.50">std::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (21 samples, 4.50%)</title><rect x="95.0749%" y="533" width="4.4968%" height="15" fill="rgb(232,162,48)"/><text x="95.3249%" y="543.50">core:..</text></g><g><title>std::rt::lang_start::_{{closure}} (21 samples, 4.50%)</title><rect x="95.0749%" y="517" width="4.4968%" height="15" fill="rgb(246,160,12)"/><text x="95.3249%" y="527.50">std::..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (21 samples, 4.50%)</title><rect x="95.0749%" y="501" width="4.4968%" height="15" fill="rgb(247,166,0)"/><text x="95.3249%" y="511.50">std::..</text></g><g><title>core::ops::function::FnOnce::call_once (21 samples, 4.50%)</title><rect x="95.0749%" y="485" width="4.4968%" height="15" fill="rgb(249,219,21)"/><text x="95.3249%" y="495.50">core:..</text></g><g><title>lab4::main (21 samples, 4.50%)</title><rect x="95.0749%" y="469" width="4.4968%" height="15" fill="rgb(205,209,3)"/><text x="95.3249%" y="479.50">lab4:..</text></g><g><title>lab4::hackathon (21 samples, 4.50%)</title><rect x="95.0749%" y="453" width="4.4968%" height="15" fill="rgb(243,44,1)"/><text x="95.3249%" y="463.50">lab4:..</text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (17 samples, 3.64%)</title><rect x="95.9315%" y="437" width="3.6403%" height="15" fill="rgb(206,159,16)"/><text x="96.1815%" y="447.50">std:..</text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (17 samples, 3.64%)</title><rect x="95.9315%" y="421" width="3.6403%" height="15" fill="rgb(244,77,30)"/><text x="96.1815%" y="431.50">std:..</text></g><g><title>std::sys::unix::thread::Thread::join (17 samples, 3.64%)</title><rect x="95.9315%" y="405" width="3.6403%" height="15" fill="rgb(218,69,12)"/><text x="96.1815%" y="415.50">std:..</text></g><g><title>__GI___pthread_timedjoin_ex (17 samples, 3.64%)</title><rect x="95.9315%" y="389" width="3.6403%" height="15" fill="rgb(212,87,7)"/><text x="96.1815%" y="399.50">__GI..</text></g><g><title>__GI___tunables_init (1 samples, 0.21%)</title><rect x="99.5717%" y="581" width="0.2141%" height="15" fill="rgb(245,114,25)"/><text x="99.8217%" y="591.50"></text></g><g><title>tunable_is_name (1 samples, 0.21%)</title><rect x="99.5717%" y="565" width="0.2141%" height="15" fill="rgb(210,61,42)"/><text x="99.8217%" y="575.50"></text></g><g><title>all (467 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(211,52,33)"/><text x="0.2500%" y="687.50"></text></g><g><title>lab4 (467 samples, 100.00%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(234,58,33)"/><text x="0.2500%" y="671.50">lab4</text></g><g><title>_start (29 samples, 6.21%)</title><rect x="93.7901%" y="645" width="6.2099%" height="15" fill="rgb(220,115,36)"/><text x="94.0401%" y="655.50">_start</text></g><g><title>_dl_start (2 samples, 0.43%)</title><rect x="99.5717%" y="629" width="0.4283%" height="15" fill="rgb(243,153,54)"/><text x="99.8217%" y="639.50"></text></g><g><title>_dl_start_final (2 samples, 0.43%)</title><rect x="99.5717%" y="613" width="0.4283%" height="15" fill="rgb(251,47,18)"/><text x="99.8217%" y="623.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.43%)</title><rect x="99.5717%" y="597" width="0.4283%" height="15" fill="rgb(242,102,42)"/><text x="99.8217%" y="607.50"></text></g><g><title>dl_main (1 samples, 0.21%)</title><rect x="99.7859%" y="581" width="0.2141%" height="15" fill="rgb(234,31,38)"/><text x="100.0359%" y="591.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.21%)</title><rect x="99.7859%" y="565" width="0.2141%" height="15" fill="rgb(221,117,51)"/><text x="100.0359%" y="575.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.21%)</title><rect x="99.7859%" y="549" width="0.2141%" height="15" fill="rgb(212,20,18)"/><text x="100.0359%" y="559.50"></text></g><g><title>elf_machine_rela (1 samples, 0.21%)</title><rect x="99.7859%" y="533" width="0.2141%" height="15" fill="rgb(245,133,36)"/><text x="100.0359%" y="543.50"></text></g><g><title>_dl_lookup_symbol_x (1 samples, 0.21%)</title><rect x="99.7859%" y="517" width="0.2141%" height="15" fill="rgb(212,6,19)"/><text x="100.0359%" y="527.50"></text></g><g><title>dl_new_hash (1 samples, 0.21%)</title><rect x="99.7859%" y="501" width="0.2141%" height="15" fill="rgb(218,1,36)"/><text x="100.0359%" y="511.50"></text></g></svg></svg>