<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="742" onload="init(evt)" viewBox="0 0 1200 742" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="742" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="725.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="725.00"> </text><svg id="frames" x="10" width="1180"><g><title>&lt;sha2::sha256::Sha256 as core::default::Default&gt;::default (1 samples, 0.10%)</title><rect x="0.0000%" y="645" width="0.1035%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="655.50"></text></g><g><title>[[heap]] (2 samples, 0.21%)</title><rect x="0.0000%" y="661" width="0.2070%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="671.50"></text></g><g><title>std::thread::park (1 samples, 0.10%)</title><rect x="0.1035%" y="645" width="0.1035%" height="15" fill="rgb(221,193,54)"/><text x="0.3535%" y="655.50"></text></g><g><title>[[stack]] (2 samples, 0.21%)</title><rect x="0.2070%" y="661" width="0.2070%" height="15" fill="rgb(248,212,6)"/><text x="0.4570%" y="671.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (2 samples, 0.21%)</title><rect x="0.2070%" y="645" width="0.2070%" height="15" fill="rgb(208,68,35)"/><text x="0.4570%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="0.4141%" y="645" width="0.1035%" height="15" fill="rgb(232,128,0)"/><text x="0.6641%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (1 samples, 0.10%)</title><rect x="0.4141%" y="629" width="0.1035%" height="15" fill="rgb(207,160,47)"/><text x="0.6641%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.4141%" y="613" width="0.1035%" height="15" fill="rgb(228,23,34)"/><text x="0.6641%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.4141%" y="597" width="0.1035%" height="15" fill="rgb(218,30,26)"/><text x="0.6641%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="0.4141%" y="581" width="0.1035%" height="15" fill="rgb(220,122,19)"/><text x="0.6641%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.10%)</title><rect x="0.4141%" y="565" width="0.1035%" height="15" fill="rgb(250,228,42)"/><text x="0.6641%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1 samples, 0.10%)</title><rect x="0.4141%" y="549" width="0.1035%" height="15" fill="rgb(240,193,28)"/><text x="0.6641%" y="559.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (1 samples, 0.10%)</title><rect x="0.4141%" y="533" width="0.1035%" height="15" fill="rgb(216,20,37)"/><text x="0.6641%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (1 samples, 0.10%)</title><rect x="0.4141%" y="517" width="0.1035%" height="15" fill="rgb(206,188,39)"/><text x="0.6641%" y="527.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adaptor&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.10%)</title><rect x="0.5176%" y="645" width="0.1035%" height="15" fill="rgb(217,207,13)"/><text x="0.7676%" y="655.50"></text></g><g><title>__GI___libc_free (2 samples, 0.21%)</title><rect x="0.6211%" y="645" width="0.2070%" height="15" fill="rgb(231,73,38)"/><text x="0.8711%" y="655.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (3 samples, 0.31%)</title><rect x="0.8282%" y="645" width="0.3106%" height="15" fill="rgb(225,20,46)"/><text x="1.0782%" y="655.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (1 samples, 0.10%)</title><rect x="1.1387%" y="645" width="0.1035%" height="15" fill="rgb(210,31,41)"/><text x="1.3887%" y="655.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (1 samples, 0.10%)</title><rect x="1.2422%" y="645" width="0.1035%" height="15" fill="rgb(221,200,47)"/><text x="1.4922%" y="655.50"></text></g><g><title>[anon] (10 samples, 1.04%)</title><rect x="0.4141%" y="661" width="1.0352%" height="15" fill="rgb(226,26,5)"/><text x="0.6641%" y="671.50"></text></g><g><title>hex::val (1 samples, 0.10%)</title><rect x="1.3458%" y="645" width="0.1035%" height="15" fill="rgb(249,33,26)"/><text x="1.5958%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (3 samples, 0.31%)</title><rect x="2.0704%" y="549" width="0.3106%" height="15" fill="rgb(235,183,28)"/><text x="2.3204%" y="559.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (3 samples, 0.31%)</title><rect x="2.0704%" y="533" width="0.3106%" height="15" fill="rgb(221,5,38)"/><text x="2.3204%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (3 samples, 0.31%)</title><rect x="2.0704%" y="517" width="0.3106%" height="15" fill="rgb(247,18,42)"/><text x="2.3204%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (15 samples, 1.55%)</title><rect x="1.4493%" y="645" width="1.5528%" height="15" fill="rgb(241,131,45)"/><text x="1.6993%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (9 samples, 0.93%)</title><rect x="2.0704%" y="629" width="0.9317%" height="15" fill="rgb(249,31,29)"/><text x="2.3204%" y="639.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.93%)</title><rect x="2.0704%" y="613" width="0.9317%" height="15" fill="rgb(225,111,53)"/><text x="2.3204%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.93%)</title><rect x="2.0704%" y="597" width="0.9317%" height="15" fill="rgb(238,160,17)"/><text x="2.3204%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 0.93%)</title><rect x="2.0704%" y="581" width="0.9317%" height="15" fill="rgb(214,148,48)"/><text x="2.3204%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9 samples, 0.93%)</title><rect x="2.0704%" y="565" width="0.9317%" height="15" fill="rgb(232,36,49)"/><text x="2.3204%" y="575.50"></text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.62%)</title><rect x="2.3810%" y="549" width="0.6211%" height="15" fill="rgb(209,103,24)"/><text x="2.6310%" y="559.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="3.0021%" y="645" width="0.1035%" height="15" fill="rgb(229,88,8)"/><text x="3.2521%" y="655.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.10%)</title><rect x="3.1056%" y="645" width="0.1035%" height="15" fill="rgb(213,181,19)"/><text x="3.3556%" y="655.50"></text></g><g><title>__GI___sysconf (1 samples, 0.10%)</title><rect x="3.2091%" y="645" width="0.1035%" height="15" fill="rgb(254,191,54)"/><text x="3.4591%" y="655.50"></text></g><g><title>_int_free (2 samples, 0.21%)</title><rect x="3.3126%" y="645" width="0.2070%" height="15" fill="rgb(241,83,37)"/><text x="3.5626%" y="655.50"></text></g><g><title>_int_realloc (1 samples, 0.10%)</title><rect x="3.5197%" y="645" width="0.1035%" height="15" fill="rgb(233,36,39)"/><text x="3.7697%" y="655.50"></text></g><g><title>core::iter::adapters::process_results (1 samples, 0.10%)</title><rect x="3.6232%" y="645" width="0.1035%" height="15" fill="rgb(226,3,54)"/><text x="3.8732%" y="655.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (1 samples, 0.10%)</title><rect x="3.7267%" y="645" width="0.1035%" height="15" fill="rgb(245,192,40)"/><text x="3.9767%" y="655.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (1 samples, 0.10%)</title><rect x="3.8302%" y="645" width="0.1035%" height="15" fill="rgb(238,167,29)"/><text x="4.0802%" y="655.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (1 samples, 0.10%)</title><rect x="3.9337%" y="645" width="0.1035%" height="15" fill="rgb(232,182,51)"/><text x="4.1837%" y="655.50"></text></g><g><title>hex::encode_to_iter (2 samples, 0.21%)</title><rect x="4.0373%" y="645" width="0.2070%" height="15" fill="rgb(231,60,39)"/><text x="4.2873%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.10%)</title><rect x="4.1408%" y="629" width="0.1035%" height="15" fill="rgb(208,69,12)"/><text x="4.3908%" y="639.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="4.1408%" y="613" width="0.1035%" height="15" fill="rgb(235,93,37)"/><text x="4.3908%" y="623.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.10%)</title><rect x="4.1408%" y="597" width="0.1035%" height="15" fill="rgb(213,116,39)"/><text x="4.3908%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.10%)</title><rect x="4.1408%" y="581" width="0.1035%" height="15" fill="rgb(222,207,29)"/><text x="4.3908%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.10%)</title><rect x="4.1408%" y="565" width="0.1035%" height="15" fill="rgb(206,96,30)"/><text x="4.3908%" y="575.50"></text></g><g><title>hex::val (2 samples, 0.21%)</title><rect x="4.2443%" y="645" width="0.2070%" height="15" fill="rgb(218,138,4)"/><text x="4.4943%" y="655.50"></text></g><g><title>[unknown] (30 samples, 3.11%)</title><rect x="1.4493%" y="661" width="3.1056%" height="15" fill="rgb(250,191,14)"/><text x="1.6993%" y="671.50">[un..</text></g><g><title>syscall (1 samples, 0.10%)</title><rect x="4.4513%" y="645" width="0.1035%" height="15" fill="rgb(239,60,40)"/><text x="4.7013%" y="655.50"></text></g><g><title>__GI___ctype_init (1 samples, 0.10%)</title><rect x="12.6294%" y="629" width="0.1035%" height="15" fill="rgb(206,27,48)"/><text x="12.8794%" y="639.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (31 samples, 3.21%)</title><rect x="12.7329%" y="389" width="3.2091%" height="15" fill="rgb(225,35,8)"/><text x="12.9829%" y="399.50">cro..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (31 samples, 3.21%)</title><rect x="12.7329%" y="373" width="3.2091%" height="15" fill="rgb(250,213,24)"/><text x="12.9829%" y="383.50">cro..</text></g><g><title>core::sync::atomic::spin_loop_hint (31 samples, 3.21%)</title><rect x="12.7329%" y="357" width="3.2091%" height="15" fill="rgb(247,123,22)"/><text x="12.9829%" y="367.50">cor..</text></g><g><title>core::hint::spin_loop (31 samples, 3.21%)</title><rect x="12.7329%" y="341" width="3.2091%" height="15" fill="rgb(231,138,38)"/><text x="12.9829%" y="351.50">cor..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (31 samples, 3.21%)</title><rect x="12.7329%" y="325" width="3.2091%" height="15" fill="rgb(231,145,46)"/><text x="12.9829%" y="335.50">cor..</text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (1 samples, 0.10%)</title><rect x="15.9420%" y="373" width="0.1035%" height="15" fill="rgb(251,118,11)"/><text x="16.1920%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_or (1 samples, 0.10%)</title><rect x="15.9420%" y="357" width="0.1035%" height="15" fill="rgb(217,147,25)"/><text x="16.1920%" y="367.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (33 samples, 3.42%)</title><rect x="12.7329%" y="421" width="3.4161%" height="15" fill="rgb(247,81,37)"/><text x="12.9829%" y="431.50">cro..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (33 samples, 3.42%)</title><rect x="12.7329%" y="405" width="3.4161%" height="15" fill="rgb(209,12,38)"/><text x="12.9829%" y="415.50">cro..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (2 samples, 0.21%)</title><rect x="15.9420%" y="389" width="0.2070%" height="15" fill="rgb(227,1,9)"/><text x="16.1920%" y="399.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (1 samples, 0.10%)</title><rect x="16.0455%" y="373" width="0.1035%" height="15" fill="rgb(248,47,43)"/><text x="16.2955%" y="383.50"></text></g><g><title>crossbeam_channel::utils::Spinlock&lt;T&gt;::lock (1 samples, 0.10%)</title><rect x="16.0455%" y="357" width="0.1035%" height="15" fill="rgb(221,10,30)"/><text x="16.2955%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicBool::swap (1 samples, 0.10%)</title><rect x="16.0455%" y="341" width="0.1035%" height="15" fill="rgb(210,229,1)"/><text x="16.2955%" y="351.50"></text></g><g><title>lab4::checksum::Checksum::update (2 samples, 0.21%)</title><rect x="16.1491%" y="421" width="0.2070%" height="15" fill="rgb(222,148,37)"/><text x="16.3991%" y="431.50"></text></g><g><title>hex::decode (2 samples, 0.21%)</title><rect x="16.1491%" y="405" width="0.2070%" height="15" fill="rgb(234,67,33)"/><text x="16.3991%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (2 samples, 0.21%)</title><rect x="16.1491%" y="389" width="0.2070%" height="15" fill="rgb(247,98,35)"/><text x="16.3991%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.21%)</title><rect x="16.1491%" y="373" width="0.2070%" height="15" fill="rgb(247,138,52)"/><text x="16.3991%" y="383.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (2 samples, 0.21%)</title><rect x="16.1491%" y="357" width="0.2070%" height="15" fill="rgb(213,79,30)"/><text x="16.3991%" y="367.50"></text></g><g><title>core::iter::adapters::process_results (2 samples, 0.21%)</title><rect x="16.1491%" y="341" width="0.2070%" height="15" fill="rgb(246,177,23)"/><text x="16.3991%" y="351.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (2 samples, 0.21%)</title><rect x="16.1491%" y="325" width="0.2070%" height="15" fill="rgb(230,62,27)"/><text x="16.3991%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.21%)</title><rect x="16.1491%" y="309" width="0.2070%" height="15" fill="rgb(216,154,8)"/><text x="16.3991%" y="319.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.21%)</title><rect x="16.1491%" y="293" width="0.2070%" height="15" fill="rgb(244,35,45)"/><text x="16.3991%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.21%)</title><rect x="16.1491%" y="277" width="0.2070%" height="15" fill="rgb(251,115,12)"/><text x="16.3991%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.21%)</title><rect x="16.1491%" y="261" width="0.2070%" height="15" fill="rgb(240,54,50)"/><text x="16.3991%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.21%)</title><rect x="16.1491%" y="245" width="0.2070%" height="15" fill="rgb(233,84,52)"/><text x="16.3991%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (2 samples, 0.21%)</title><rect x="16.1491%" y="229" width="0.2070%" height="15" fill="rgb(207,117,47)"/><text x="16.3991%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.10%)</title><rect x="16.2526%" y="213" width="0.1035%" height="15" fill="rgb(249,43,39)"/><text x="16.5026%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="16.2526%" y="197" width="0.1035%" height="15" fill="rgb(209,38,44)"/><text x="16.5026%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.10%)</title><rect x="16.2526%" y="181" width="0.1035%" height="15" fill="rgb(236,212,23)"/><text x="16.5026%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="16.2526%" y="165" width="0.1035%" height="15" fill="rgb(242,79,21)"/><text x="16.5026%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="16.2526%" y="149" width="0.1035%" height="15" fill="rgb(211,96,35)"/><text x="16.5026%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.10%)</title><rect x="16.2526%" y="133" width="0.1035%" height="15" fill="rgb(253,215,40)"/><text x="16.5026%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.10%)</title><rect x="16.2526%" y="117" width="0.1035%" height="15" fill="rgb(211,81,21)"/><text x="16.5026%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.10%)</title><rect x="16.2526%" y="101" width="0.1035%" height="15" fill="rgb(208,190,38)"/><text x="16.5026%" y="111.50"></text></g><g><title>__rdl_realloc (1 samples, 0.10%)</title><rect x="16.2526%" y="85" width="0.1035%" height="15" fill="rgb(235,213,38)"/><text x="16.5026%" y="95.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (1 samples, 0.10%)</title><rect x="16.3561%" y="405" width="0.1035%" height="15" fill="rgb(237,122,38)"/><text x="16.6061%" y="415.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (1 samples, 0.10%)</title><rect x="16.3561%" y="389" width="0.1035%" height="15" fill="rgb(244,218,35)"/><text x="16.6061%" y="399.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (1 samples, 0.10%)</title><rect x="16.3561%" y="373" width="0.1035%" height="15" fill="rgb(240,68,47)"/><text x="16.6061%" y="383.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (1 samples, 0.10%)</title><rect x="16.3561%" y="357" width="0.1035%" height="15" fill="rgb(210,16,53)"/><text x="16.6061%" y="367.50"></text></g><g><title>sha2::sha256::Engine256::finish (1 samples, 0.10%)</title><rect x="16.3561%" y="341" width="0.1035%" height="15" fill="rgb(235,124,12)"/><text x="16.6061%" y="351.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (1 samples, 0.10%)</title><rect x="16.3561%" y="325" width="0.1035%" height="15" fill="rgb(224,169,11)"/><text x="16.6061%" y="335.50"></text></g><g><title>sha2::sha256::Engine256::finish::_{{closure}} (1 samples, 0.10%)</title><rect x="16.3561%" y="309" width="0.1035%" height="15" fill="rgb(250,166,2)"/><text x="16.6061%" y="319.50"></text></g><g><title>sha2::sha256::compress256 (1 samples, 0.10%)</title><rect x="16.3561%" y="293" width="0.1035%" height="15" fill="rgb(242,216,29)"/><text x="16.6061%" y="303.50"></text></g><g><title>sha2::sha256::x86::compress (1 samples, 0.10%)</title><rect x="16.3561%" y="277" width="0.1035%" height="15" fill="rgb(230,116,27)"/><text x="16.6061%" y="287.50"></text></g><g><title>sha2::sha256::soft::compress (1 samples, 0.10%)</title><rect x="16.3561%" y="261" width="0.1035%" height="15" fill="rgb(228,99,48)"/><text x="16.6061%" y="271.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (1 samples, 0.10%)</title><rect x="16.3561%" y="245" width="0.1035%" height="15" fill="rgb(253,11,6)"/><text x="16.6061%" y="255.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (1 samples, 0.10%)</title><rect x="16.3561%" y="229" width="0.1035%" height="15" fill="rgb(247,143,39)"/><text x="16.6061%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.10%)</title><rect x="16.3561%" y="213" width="0.1035%" height="15" fill="rgb(236,97,10)"/><text x="16.6061%" y="223.50"></text></g><g><title>lab4::idea::IdeaGenerator::run (37 samples, 3.83%)</title><rect x="12.7329%" y="437" width="3.8302%" height="15" fill="rgb(233,208,19)"/><text x="12.9829%" y="447.50">lab4..</text></g><g><title>lab4::checksum::Checksum::with_sha256 (2 samples, 0.21%)</title><rect x="16.3561%" y="421" width="0.2070%" height="15" fill="rgb(216,164,2)"/><text x="16.6061%" y="431.50"></text></g><g><title>hex::encode (1 samples, 0.10%)</title><rect x="16.4596%" y="405" width="0.1035%" height="15" fill="rgb(220,129,5)"/><text x="16.7096%" y="415.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (1 samples, 0.10%)</title><rect x="16.4596%" y="389" width="0.1035%" height="15" fill="rgb(242,17,10)"/><text x="16.7096%" y="399.50"></text></g><g><title>hex::encode_to_iter (1 samples, 0.10%)</title><rect x="16.4596%" y="373" width="0.1035%" height="15" fill="rgb(242,107,0)"/><text x="16.7096%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.10%)</title><rect x="16.4596%" y="357" width="0.1035%" height="15" fill="rgb(251,28,31)"/><text x="16.7096%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.10%)</title><rect x="16.4596%" y="341" width="0.1035%" height="15" fill="rgb(233,223,10)"/><text x="16.7096%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.10%)</title><rect x="16.4596%" y="325" width="0.1035%" height="15" fill="rgb(215,21,27)"/><text x="16.7096%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.10%)</title><rect x="16.4596%" y="309" width="0.1035%" height="15" fill="rgb(232,23,21)"/><text x="16.7096%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.10%)</title><rect x="16.4596%" y="293" width="0.1035%" height="15" fill="rgb(244,5,23)"/><text x="16.7096%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="16.4596%" y="277" width="0.1035%" height="15" fill="rgb(226,81,46)"/><text x="16.7096%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (1 samples, 0.10%)</title><rect x="16.4596%" y="261" width="0.1035%" height="15" fill="rgb(247,70,30)"/><text x="16.7096%" y="271.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.10%)</title><rect x="16.4596%" y="245" width="0.1035%" height="15" fill="rgb(212,68,19)"/><text x="16.7096%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.10%)</title><rect x="16.4596%" y="229" width="0.1035%" height="15" fill="rgb(240,187,13)"/><text x="16.7096%" y="239.50"></text></g><g><title>core::ptr::write (1 samples, 0.10%)</title><rect x="16.4596%" y="213" width="0.1035%" height="15" fill="rgb(223,113,26)"/><text x="16.7096%" y="223.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.10%)</title><rect x="16.5631%" y="389" width="0.1035%" height="15" fill="rgb(206,192,2)"/><text x="16.8131%" y="399.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (3 samples, 0.31%)</title><rect x="16.5631%" y="421" width="0.3106%" height="15" fill="rgb(241,108,4)"/><text x="16.8131%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.31%)</title><rect x="16.5631%" y="405" width="0.3106%" height="15" fill="rgb(247,173,49)"/><text x="16.8131%" y="415.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.21%)</title><rect x="16.6667%" y="389" width="0.2070%" height="15" fill="rgb(224,114,35)"/><text x="16.9167%" y="399.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.21%)</title><rect x="16.6667%" y="373" width="0.2070%" height="15" fill="rgb(245,159,27)"/><text x="16.9167%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.21%)</title><rect x="16.6667%" y="357" width="0.2070%" height="15" fill="rgb(245,172,44)"/><text x="16.9167%" y="367.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.21%)</title><rect x="16.6667%" y="341" width="0.2070%" height="15" fill="rgb(236,23,11)"/><text x="16.9167%" y="351.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.21%)</title><rect x="16.6667%" y="325" width="0.2070%" height="15" fill="rgb(205,117,38)"/><text x="16.9167%" y="335.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.21%)</title><rect x="16.6667%" y="309" width="0.2070%" height="15" fill="rgb(237,72,25)"/><text x="16.9167%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.21%)</title><rect x="16.6667%" y="293" width="0.2070%" height="15" fill="rgb(244,70,9)"/><text x="16.9167%" y="303.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.21%)</title><rect x="16.6667%" y="277" width="0.2070%" height="15" fill="rgb(217,125,39)"/><text x="16.9167%" y="287.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.21%)</title><rect x="16.6667%" y="261" width="0.2070%" height="15" fill="rgb(235,36,10)"/><text x="16.9167%" y="271.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.21%)</title><rect x="16.6667%" y="245" width="0.2070%" height="15" fill="rgb(251,123,47)"/><text x="16.9167%" y="255.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="16.7702%" y="229" width="0.1035%" height="15" fill="rgb(221,13,13)"/><text x="17.0202%" y="239.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="16.8737%" y="421" width="0.1035%" height="15" fill="rgb(238,131,9)"/><text x="17.1237%" y="431.50"></text></g><g><title>&lt;std::sync::mutex::MutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="16.8737%" y="405" width="0.1035%" height="15" fill="rgb(211,50,8)"/><text x="17.1237%" y="415.50"></text></g><g><title>std::sys_common::mutex::MovableMutex::raw_unlock (1 samples, 0.10%)</title><rect x="16.8737%" y="389" width="0.1035%" height="15" fill="rgb(245,182,24)"/><text x="17.1237%" y="399.50"></text></g><g><title>std::sys::unix::mutex::Mutex::unlock (1 samples, 0.10%)</title><rect x="16.8737%" y="373" width="0.1035%" height="15" fill="rgb(242,14,37)"/><text x="17.1237%" y="383.50"></text></g><g><title>__GI___pthread_mutex_unlock (1 samples, 0.10%)</title><rect x="16.8737%" y="357" width="0.1035%" height="15" fill="rgb(246,228,12)"/><text x="17.1237%" y="367.50"></text></g><g><title>__pthread_mutex_unlock_usercnt (1 samples, 0.10%)</title><rect x="16.8737%" y="341" width="0.1035%" height="15" fill="rgb(213,55,15)"/><text x="17.1237%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (2 samples, 0.21%)</title><rect x="17.0807%" y="373" width="0.2070%" height="15" fill="rgb(209,9,3)"/><text x="17.3307%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (2 samples, 0.21%)</title><rect x="17.0807%" y="357" width="0.2070%" height="15" fill="rgb(230,59,30)"/><text x="17.3307%" y="367.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (17 samples, 1.76%)</title><rect x="17.2878%" y="373" width="1.7598%" height="15" fill="rgb(209,121,21)"/><text x="17.5378%" y="383.50"></text></g><g><title>__GI___sched_yield (17 samples, 1.76%)</title><rect x="17.2878%" y="357" width="1.7598%" height="15" fill="rgb(220,109,13)"/><text x="17.5378%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (166 samples, 17.18%)</title><rect x="17.0807%" y="389" width="17.1843%" height="15" fill="rgb(232,18,1)"/><text x="17.3307%" y="399.50">crossbeam_channel::flavors:..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (147 samples, 15.22%)</title><rect x="19.0476%" y="373" width="15.2174%" height="15" fill="rgb(215,41,42)"/><text x="19.2976%" y="383.50">crossbeam_utils::backof..</text></g><g><title>core::sync::atomic::spin_loop_hint (147 samples, 15.22%)</title><rect x="19.0476%" y="357" width="15.2174%" height="15" fill="rgb(224,123,36)"/><text x="19.2976%" y="367.50">core::sync::atomic::spi..</text></g><g><title>core::hint::spin_loop (147 samples, 15.22%)</title><rect x="19.0476%" y="341" width="15.2174%" height="15" fill="rgb(240,125,3)"/><text x="19.2976%" y="351.50">core::hint::spin_loop</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (147 samples, 15.22%)</title><rect x="19.0476%" y="325" width="15.2174%" height="15" fill="rgb(205,98,50)"/><text x="19.2976%" y="335.50">core::core_arch::x86::s..</text></g><g><title>core::sync::atomic::AtomicBool::swap (2 samples, 0.21%)</title><rect x="34.2650%" y="341" width="0.2070%" height="15" fill="rgb(205,185,37)"/><text x="34.5150%" y="351.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.10%)</title><rect x="34.3685%" y="325" width="0.1035%" height="15" fill="rgb(238,207,15)"/><text x="34.6185%" y="335.50"></text></g><g><title>__GI___sched_yield (3 samples, 0.31%)</title><rect x="34.4720%" y="325" width="0.3106%" height="15" fill="rgb(213,199,42)"/><text x="34.7220%" y="335.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (174 samples, 18.01%)</title><rect x="16.9772%" y="421" width="18.0124%" height="15" fill="rgb(235,201,11)"/><text x="17.2272%" y="431.50">crossbeam_channel::channel::..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (173 samples, 17.91%)</title><rect x="17.0807%" y="405" width="17.9089%" height="15" fill="rgb(207,46,11)"/><text x="17.3307%" y="415.50">crossbeam_channel::flavors::..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (7 samples, 0.72%)</title><rect x="34.2650%" y="389" width="0.7246%" height="15" fill="rgb(241,35,35)"/><text x="34.5150%" y="399.50"></text></g><g><title>crossbeam_channel::waker::SyncWaker::notify (7 samples, 0.72%)</title><rect x="34.2650%" y="373" width="0.7246%" height="15" fill="rgb(243,32,47)"/><text x="34.5150%" y="383.50"></text></g><g><title>crossbeam_channel::utils::Spinlock&lt;T&gt;::lock (7 samples, 0.72%)</title><rect x="34.2650%" y="357" width="0.7246%" height="15" fill="rgb(247,202,23)"/><text x="34.5150%" y="367.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (5 samples, 0.52%)</title><rect x="34.4720%" y="341" width="0.5176%" height="15" fill="rgb(219,102,11)"/><text x="34.7220%" y="351.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (2 samples, 0.21%)</title><rect x="34.7826%" y="325" width="0.2070%" height="15" fill="rgb(243,110,44)"/><text x="35.0326%" y="335.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.21%)</title><rect x="34.7826%" y="309" width="0.2070%" height="15" fill="rgb(222,74,54)"/><text x="35.0326%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.21%)</title><rect x="34.7826%" y="293" width="0.2070%" height="15" fill="rgb(216,99,12)"/><text x="35.0326%" y="303.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.21%)</title><rect x="35.0932%" y="373" width="0.2070%" height="15" fill="rgb(226,22,26)"/><text x="35.3432%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (2 samples, 0.21%)</title><rect x="35.0932%" y="357" width="0.2070%" height="15" fill="rgb(217,163,10)"/><text x="35.3432%" y="367.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.21%)</title><rect x="35.0932%" y="341" width="0.2070%" height="15" fill="rgb(213,25,53)"/><text x="35.3432%" y="351.50"></text></g><g><title>__GI___libc_free (2 samples, 0.21%)</title><rect x="35.0932%" y="325" width="0.2070%" height="15" fill="rgb(252,105,26)"/><text x="35.3432%" y="335.50"></text></g><g><title>_int_free (2 samples, 0.21%)</title><rect x="35.0932%" y="309" width="0.2070%" height="15" fill="rgb(220,39,43)"/><text x="35.3432%" y="319.50"></text></g><g><title>tcache_put (1 samples, 0.10%)</title><rect x="35.1967%" y="293" width="0.1035%" height="15" fill="rgb(229,68,48)"/><text x="35.4467%" y="303.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.41%)</title><rect x="35.0932%" y="405" width="0.4141%" height="15" fill="rgb(252,8,32)"/><text x="35.3432%" y="415.50"></text></g><g><title>core::ptr::drop_in_place (4 samples, 0.41%)</title><rect x="35.0932%" y="389" width="0.4141%" height="15" fill="rgb(223,20,43)"/><text x="35.3432%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.21%)</title><rect x="35.3002%" y="373" width="0.2070%" height="15" fill="rgb(229,81,49)"/><text x="35.5502%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (2 samples, 0.21%)</title><rect x="35.3002%" y="357" width="0.2070%" height="15" fill="rgb(236,28,36)"/><text x="35.5502%" y="367.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.21%)</title><rect x="35.3002%" y="341" width="0.2070%" height="15" fill="rgb(249,185,26)"/><text x="35.5502%" y="351.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.10%)</title><rect x="35.4037%" y="325" width="0.1035%" height="15" fill="rgb(249,174,33)"/><text x="35.6537%" y="335.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.10%)</title><rect x="35.4037%" y="309" width="0.1035%" height="15" fill="rgb(233,201,37)"/><text x="35.6537%" y="319.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="35.4037%" y="293" width="0.1035%" height="15" fill="rgb(221,78,26)"/><text x="35.6537%" y="303.50"></text></g><g><title>&lt;usize as core::ops::arith::AddAssign&gt;::add_assign (1 samples, 0.10%)</title><rect x="35.8178%" y="101" width="0.1035%" height="15" fill="rgb(250,127,30)"/><text x="36.0678%" y="111.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (23 samples, 2.38%)</title><rect x="35.8178%" y="117" width="2.3810%" height="15" fill="rgb(230,49,44)"/><text x="36.0678%" y="127.50">&lt;c..</text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (22 samples, 2.28%)</title><rect x="35.9213%" y="101" width="2.2774%" height="15" fill="rgb(229,67,23)"/><text x="36.1713%" y="111.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (21 samples, 2.17%)</title><rect x="36.0248%" y="85" width="2.1739%" height="15" fill="rgb(249,83,47)"/><text x="36.2748%" y="95.50">&lt;..</text></g><g><title>hex::val (17 samples, 1.76%)</title><rect x="36.4389%" y="69" width="1.7598%" height="15" fill="rgb(215,43,3)"/><text x="36.6889%" y="79.50"></text></g><g><title>core::cmp::min (2 samples, 0.21%)</title><rect x="38.3023%" y="101" width="0.2070%" height="15" fill="rgb(238,154,13)"/><text x="38.5523%" y="111.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.21%)</title><rect x="38.3023%" y="85" width="0.2070%" height="15" fill="rgb(219,56,2)"/><text x="38.5523%" y="95.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.21%)</title><rect x="38.3023%" y="69" width="0.2070%" height="15" fill="rgb(233,0,4)"/><text x="38.5523%" y="79.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 2.90%)</title><rect x="35.7143%" y="213" width="2.8986%" height="15" fill="rgb(235,30,7)"/><text x="35.9643%" y="223.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::find (28 samples, 2.90%)</title><rect x="35.7143%" y="197" width="2.8986%" height="15" fill="rgb(250,79,13)"/><text x="35.9643%" y="207.50">co..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (28 samples, 2.90%)</title><rect x="35.7143%" y="181" width="2.8986%" height="15" fill="rgb(211,146,34)"/><text x="35.9643%" y="191.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 2.80%)</title><rect x="35.8178%" y="165" width="2.7950%" height="15" fill="rgb(228,22,38)"/><text x="36.0678%" y="175.50">&lt;c..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (27 samples, 2.80%)</title><rect x="35.8178%" y="149" width="2.7950%" height="15" fill="rgb(235,168,5)"/><text x="36.0678%" y="159.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (27 samples, 2.80%)</title><rect x="35.8178%" y="133" width="2.7950%" height="15" fill="rgb(221,155,16)"/><text x="36.0678%" y="143.50">co..</text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.41%)</title><rect x="38.1988%" y="117" width="0.4141%" height="15" fill="rgb(215,215,53)"/><text x="38.4488%" y="127.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.10%)</title><rect x="38.5093%" y="101" width="0.1035%" height="15" fill="rgb(223,4,10)"/><text x="38.7593%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.10%)</title><rect x="38.5093%" y="85" width="0.1035%" height="15" fill="rgb(234,103,6)"/><text x="38.7593%" y="95.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.10%)</title><rect x="38.5093%" y="69" width="0.1035%" height="15" fill="rgb(227,97,0)"/><text x="38.7593%" y="79.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.10%)</title><rect x="38.5093%" y="53" width="0.1035%" height="15" fill="rgb(234,150,53)"/><text x="38.7593%" y="63.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.10%)</title><rect x="38.5093%" y="37" width="0.1035%" height="15" fill="rgb(228,201,54)"/><text x="38.7593%" y="47.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.10%)</title><rect x="38.6128%" y="213" width="0.1035%" height="15" fill="rgb(222,22,37)"/><text x="38.8628%" y="223.50"></text></g><g><title>__GI___libc_realloc (7 samples, 0.72%)</title><rect x="38.8199%" y="85" width="0.7246%" height="15" fill="rgb(237,53,32)"/><text x="39.0699%" y="95.50"></text></g><g><title>_int_realloc (4 samples, 0.41%)</title><rect x="39.1304%" y="69" width="0.4141%" height="15" fill="rgb(233,25,53)"/><text x="39.3804%" y="79.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="39.4410%" y="53" width="0.1035%" height="15" fill="rgb(210,40,34)"/><text x="39.6910%" y="63.50"></text></g><g><title>tcache_put (1 samples, 0.10%)</title><rect x="39.4410%" y="37" width="0.1035%" height="15" fill="rgb(241,220,44)"/><text x="39.6910%" y="47.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (9 samples, 0.93%)</title><rect x="38.7164%" y="213" width="0.9317%" height="15" fill="rgb(235,28,35)"/><text x="38.9664%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (9 samples, 0.93%)</title><rect x="38.7164%" y="197" width="0.9317%" height="15" fill="rgb(210,56,17)"/><text x="38.9664%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (9 samples, 0.93%)</title><rect x="38.7164%" y="181" width="0.9317%" height="15" fill="rgb(224,130,29)"/><text x="38.9664%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (9 samples, 0.93%)</title><rect x="38.7164%" y="165" width="0.9317%" height="15" fill="rgb(235,212,8)"/><text x="38.9664%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (9 samples, 0.93%)</title><rect x="38.7164%" y="149" width="0.9317%" height="15" fill="rgb(223,33,50)"/><text x="38.9664%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (9 samples, 0.93%)</title><rect x="38.7164%" y="133" width="0.9317%" height="15" fill="rgb(219,149,13)"/><text x="38.9664%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (9 samples, 0.93%)</title><rect x="38.7164%" y="117" width="0.9317%" height="15" fill="rgb(250,156,29)"/><text x="38.9664%" y="127.50"></text></g><g><title>alloc::alloc::realloc (9 samples, 0.93%)</title><rect x="38.7164%" y="101" width="0.9317%" height="15" fill="rgb(216,193,19)"/><text x="38.9664%" y="111.50"></text></g><g><title>__rust_realloc (1 samples, 0.10%)</title><rect x="39.5445%" y="85" width="0.1035%" height="15" fill="rgb(216,135,14)"/><text x="39.7945%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (41 samples, 4.24%)</title><rect x="35.6108%" y="245" width="4.2443%" height="15" fill="rgb(241,47,5)"/><text x="35.8608%" y="255.50">&lt;allo..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (41 samples, 4.24%)</title><rect x="35.6108%" y="229" width="4.2443%" height="15" fill="rgb(233,42,35)"/><text x="35.8608%" y="239.50">alloc..</text></g><g><title>core::ptr::write (2 samples, 0.21%)</title><rect x="39.6480%" y="213" width="0.2070%" height="15" fill="rgb(231,13,6)"/><text x="39.8980%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="39.8551%" y="245" width="0.2070%" height="15" fill="rgb(207,181,40)"/><text x="40.1051%" y="255.50"></text></g><g><title>core::iter::traits::iterator::Iterator::find (2 samples, 0.21%)</title><rect x="39.8551%" y="229" width="0.2070%" height="15" fill="rgb(254,173,49)"/><text x="40.1051%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2 samples, 0.21%)</title><rect x="39.8551%" y="213" width="0.2070%" height="15" fill="rgb(221,1,38)"/><text x="40.1051%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="39.9586%" y="197" width="0.1035%" height="15" fill="rgb(206,124,46)"/><text x="40.2086%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.10%)</title><rect x="39.9586%" y="181" width="0.1035%" height="15" fill="rgb(249,21,11)"/><text x="40.2086%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.10%)</title><rect x="39.9586%" y="165" width="0.1035%" height="15" fill="rgb(222,201,40)"/><text x="40.2086%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (1 samples, 0.10%)</title><rect x="39.9586%" y="149" width="0.1035%" height="15" fill="rgb(235,61,29)"/><text x="40.2086%" y="159.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (1 samples, 0.10%)</title><rect x="39.9586%" y="133" width="0.1035%" height="15" fill="rgb(219,207,3)"/><text x="40.2086%" y="143.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (1 samples, 0.10%)</title><rect x="39.9586%" y="117" width="0.1035%" height="15" fill="rgb(222,56,46)"/><text x="40.2086%" y="127.50"></text></g><g><title>hex::decode (49 samples, 5.07%)</title><rect x="35.5072%" y="405" width="5.0725%" height="15" fill="rgb(239,76,54)"/><text x="35.7572%" y="415.50">hex::d..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (49 samples, 5.07%)</title><rect x="35.5072%" y="389" width="5.0725%" height="15" fill="rgb(231,124,27)"/><text x="35.7572%" y="399.50">&lt;alloc..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (49 samples, 5.07%)</title><rect x="35.5072%" y="373" width="5.0725%" height="15" fill="rgb(249,195,6)"/><text x="35.7572%" y="383.50">core::..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (49 samples, 5.07%)</title><rect x="35.5072%" y="357" width="5.0725%" height="15" fill="rgb(237,174,47)"/><text x="35.7572%" y="367.50">&lt;core:..</text></g><g><title>core::iter::adapters::process_results (49 samples, 5.07%)</title><rect x="35.5072%" y="341" width="5.0725%" height="15" fill="rgb(206,201,31)"/><text x="35.7572%" y="351.50">core::..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (49 samples, 5.07%)</title><rect x="35.5072%" y="325" width="5.0725%" height="15" fill="rgb(231,57,52)"/><text x="35.7572%" y="335.50">&lt;core:..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (49 samples, 5.07%)</title><rect x="35.5072%" y="309" width="5.0725%" height="15" fill="rgb(248,177,22)"/><text x="35.7572%" y="319.50">core::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (49 samples, 5.07%)</title><rect x="35.5072%" y="293" width="5.0725%" height="15" fill="rgb(215,211,37)"/><text x="35.7572%" y="303.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (48 samples, 4.97%)</title><rect x="35.6108%" y="277" width="4.9689%" height="15" fill="rgb(241,128,51)"/><text x="35.8608%" y="287.50">&lt;alloc..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (48 samples, 4.97%)</title><rect x="35.6108%" y="261" width="4.9689%" height="15" fill="rgb(227,165,31)"/><text x="35.8608%" y="271.50">&lt;alloc..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (5 samples, 0.52%)</title><rect x="40.0621%" y="245" width="0.5176%" height="15" fill="rgb(228,167,24)"/><text x="40.3121%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (5 samples, 0.52%)</title><rect x="40.0621%" y="229" width="0.5176%" height="15" fill="rgb(228,143,12)"/><text x="40.3121%" y="239.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (5 samples, 0.52%)</title><rect x="40.0621%" y="213" width="0.5176%" height="15" fill="rgb(249,149,8)"/><text x="40.3121%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (5 samples, 0.52%)</title><rect x="40.0621%" y="197" width="0.5176%" height="15" fill="rgb(243,35,44)"/><text x="40.3121%" y="207.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (5 samples, 0.52%)</title><rect x="40.0621%" y="181" width="0.5176%" height="15" fill="rgb(246,89,9)"/><text x="40.3121%" y="191.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (5 samples, 0.52%)</title><rect x="40.0621%" y="165" width="0.5176%" height="15" fill="rgb(233,213,13)"/><text x="40.3121%" y="175.50"></text></g><g><title>alloc::alloc::alloc (5 samples, 0.52%)</title><rect x="40.0621%" y="149" width="0.5176%" height="15" fill="rgb(233,141,41)"/><text x="40.3121%" y="159.50"></text></g><g><title>__GI___libc_malloc (5 samples, 0.52%)</title><rect x="40.0621%" y="133" width="0.5176%" height="15" fill="rgb(239,167,4)"/><text x="40.3121%" y="143.50"></text></g><g><title>_int_malloc (4 samples, 0.41%)</title><rect x="40.1656%" y="117" width="0.4141%" height="15" fill="rgb(209,217,16)"/><text x="40.4156%" y="127.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="40.5797%" y="277" width="0.1035%" height="15" fill="rgb(219,88,35)"/><text x="40.8297%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.10%)</title><rect x="40.5797%" y="261" width="0.1035%" height="15" fill="rgb(220,193,23)"/><text x="40.8297%" y="271.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1 samples, 0.10%)</title><rect x="40.5797%" y="245" width="0.1035%" height="15" fill="rgb(230,90,52)"/><text x="40.8297%" y="255.50"></text></g><g><title>lab4::checksum::Checksum::update (56 samples, 5.80%)</title><rect x="34.9896%" y="421" width="5.7971%" height="15" fill="rgb(252,106,19)"/><text x="35.2396%" y="431.50">lab4::c..</text></g><g><title>hex::encode (2 samples, 0.21%)</title><rect x="40.5797%" y="405" width="0.2070%" height="15" fill="rgb(206,74,20)"/><text x="40.8297%" y="415.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (2 samples, 0.21%)</title><rect x="40.5797%" y="389" width="0.2070%" height="15" fill="rgb(230,138,44)"/><text x="40.8297%" y="399.50"></text></g><g><title>hex::encode_to_iter (2 samples, 0.21%)</title><rect x="40.5797%" y="373" width="0.2070%" height="15" fill="rgb(235,182,43)"/><text x="40.8297%" y="383.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.21%)</title><rect x="40.5797%" y="357" width="0.2070%" height="15" fill="rgb(242,16,51)"/><text x="40.8297%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (2 samples, 0.21%)</title><rect x="40.5797%" y="341" width="0.2070%" height="15" fill="rgb(248,9,4)"/><text x="40.8297%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (2 samples, 0.21%)</title><rect x="40.5797%" y="325" width="0.2070%" height="15" fill="rgb(210,31,22)"/><text x="40.8297%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.21%)</title><rect x="40.5797%" y="309" width="0.2070%" height="15" fill="rgb(239,54,39)"/><text x="40.8297%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.21%)</title><rect x="40.5797%" y="293" width="0.2070%" height="15" fill="rgb(230,99,41)"/><text x="40.8297%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="40.6832%" y="277" width="0.1035%" height="15" fill="rgb(253,106,12)"/><text x="40.9332%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (1 samples, 0.10%)</title><rect x="40.6832%" y="261" width="0.1035%" height="15" fill="rgb(213,46,41)"/><text x="40.9332%" y="271.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.10%)</title><rect x="40.6832%" y="245" width="0.1035%" height="15" fill="rgb(215,133,35)"/><text x="40.9332%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.10%)</title><rect x="40.6832%" y="229" width="0.1035%" height="15" fill="rgb(213,28,5)"/><text x="40.9332%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::as_mut_ptr (1 samples, 0.10%)</title><rect x="40.6832%" y="213" width="0.1035%" height="15" fill="rgb(215,77,49)"/><text x="40.9332%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.10%)</title><rect x="40.6832%" y="197" width="0.1035%" height="15" fill="rgb(248,100,22)"/><text x="40.9332%" y="207.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::Update&gt;::update (2 samples, 0.21%)</title><rect x="40.7867%" y="389" width="0.2070%" height="15" fill="rgb(208,67,9)"/><text x="41.0367%" y="399.50"></text></g><g><title>sha2::sha256::Engine256::update (2 samples, 0.21%)</title><rect x="40.7867%" y="373" width="0.2070%" height="15" fill="rgb(219,133,21)"/><text x="41.0367%" y="383.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::input_blocks (2 samples, 0.21%)</title><rect x="40.7867%" y="357" width="0.2070%" height="15" fill="rgb(246,46,29)"/><text x="41.0367%" y="367.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::copy_from_slice (2 samples, 0.21%)</title><rect x="40.7867%" y="341" width="0.2070%" height="15" fill="rgb(246,185,52)"/><text x="41.0367%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.21%)</title><rect x="40.7867%" y="325" width="0.2070%" height="15" fill="rgb(252,136,11)"/><text x="41.0367%" y="335.50"></text></g><g><title>__memmove_avx_unaligned_erms (2 samples, 0.21%)</title><rect x="40.7867%" y="309" width="0.2070%" height="15" fill="rgb(219,138,53)"/><text x="41.0367%" y="319.50"></text></g><g><title>&lt;T as core::convert::TryInto&lt;U&gt;&gt;::try_into (1 samples, 0.10%)</title><rect x="41.0973%" y="245" width="0.1035%" height="15" fill="rgb(211,51,23)"/><text x="41.3473%" y="255.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from (1 samples, 0.10%)</title><rect x="41.0973%" y="229" width="0.1035%" height="15" fill="rgb(247,221,28)"/><text x="41.3473%" y="239.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map (1 samples, 0.10%)</title><rect x="41.0973%" y="213" width="0.1035%" height="15" fill="rgb(251,222,45)"/><text x="41.3473%" y="223.50"></text></g><g><title>core::array::_&lt;impl core::convert::TryFrom&lt;&amp;[T]&gt; for [T: N]&gt;::try_from::_{{closure}} (1 samples, 0.10%)</title><rect x="41.0973%" y="197" width="0.1035%" height="15" fill="rgb(217,162,53)"/><text x="41.3473%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be_bytes (1 samples, 0.10%)</title><rect x="41.2008%" y="245" width="0.1035%" height="15" fill="rgb(229,93,14)"/><text x="41.4508%" y="255.50"></text></g><g><title>core::num::&lt;impl u32&gt;::from_be (1 samples, 0.10%)</title><rect x="41.2008%" y="229" width="0.1035%" height="15" fill="rgb(209,67,49)"/><text x="41.4508%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::swap_bytes (1 samples, 0.10%)</title><rect x="41.2008%" y="213" width="0.1035%" height="15" fill="rgb(213,87,29)"/><text x="41.4508%" y="223.50"></text></g><g><title>sha2::sha256::soft::add (1 samples, 0.10%)</title><rect x="41.3043%" y="213" width="0.1035%" height="15" fill="rgb(205,151,52)"/><text x="41.5543%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.10%)</title><rect x="41.3043%" y="197" width="0.1035%" height="15" fill="rgb(253,215,39)"/><text x="41.5543%" y="207.50"></text></g><g><title>sha2::sha256::soft::shl (1 samples, 0.10%)</title><rect x="41.4079%" y="181" width="0.1035%" height="15" fill="rgb(221,220,41)"/><text x="41.6579%" y="191.50"></text></g><g><title>sha2::sha256::soft::sha256msg1 (2 samples, 0.21%)</title><rect x="41.4079%" y="213" width="0.2070%" height="15" fill="rgb(218,133,21)"/><text x="41.6579%" y="223.50"></text></g><g><title>sha2::sha256::soft::sha256msg1::sigma0x4 (2 samples, 0.21%)</title><rect x="41.4079%" y="197" width="0.2070%" height="15" fill="rgb(221,193,43)"/><text x="41.6579%" y="207.50"></text></g><g><title>sha2::sha256::soft::xor (1 samples, 0.10%)</title><rect x="41.5114%" y="181" width="0.1035%" height="15" fill="rgb(240,128,52)"/><text x="41.7614%" y="191.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (1 samples, 0.10%)</title><rect x="41.7184%" y="197" width="0.1035%" height="15" fill="rgb(253,114,12)"/><text x="41.9684%" y="207.50"></text></g><g><title>sha2::sha256::soft::schedule (7 samples, 0.72%)</title><rect x="41.3043%" y="229" width="0.7246%" height="15" fill="rgb(215,223,47)"/><text x="41.5543%" y="239.50"></text></g><g><title>sha2::sha256::soft::sha256msg2 (4 samples, 0.41%)</title><rect x="41.6149%" y="213" width="0.4141%" height="15" fill="rgb(248,225,23)"/><text x="41.8649%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (2 samples, 0.21%)</title><rect x="41.8219%" y="197" width="0.2070%" height="15" fill="rgb(250,108,0)"/><text x="42.0719%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (3 samples, 0.31%)</title><rect x="42.6501%" y="213" width="0.3106%" height="15" fill="rgb(228,208,7)"/><text x="42.9001%" y="223.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (24 samples, 2.48%)</title><rect x="40.7867%" y="405" width="2.4845%" height="15" fill="rgb(244,45,10)"/><text x="41.0367%" y="415.50">&lt;D..</text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (22 samples, 2.28%)</title><rect x="40.9938%" y="389" width="2.2774%" height="15" fill="rgb(207,125,25)"/><text x="41.2438%" y="399.50">d..</text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (21 samples, 2.17%)</title><rect x="41.0973%" y="373" width="2.1739%" height="15" fill="rgb(210,195,18)"/><text x="41.3473%" y="383.50">&lt;..</text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (21 samples, 2.17%)</title><rect x="41.0973%" y="357" width="2.1739%" height="15" fill="rgb(249,80,12)"/><text x="41.3473%" y="367.50">&lt;..</text></g><g><title>sha2::sha256::Engine256::finish (21 samples, 2.17%)</title><rect x="41.0973%" y="341" width="2.1739%" height="15" fill="rgb(221,65,9)"/><text x="41.3473%" y="351.50">s..</text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (21 samples, 2.17%)</title><rect x="41.0973%" y="325" width="2.1739%" height="15" fill="rgb(235,49,36)"/><text x="41.3473%" y="335.50">b..</text></g><g><title>sha2::sha256::Engine256::finish::_{{closure}} (21 samples, 2.17%)</title><rect x="41.0973%" y="309" width="2.1739%" height="15" fill="rgb(225,32,20)"/><text x="41.3473%" y="319.50">s..</text></g><g><title>sha2::sha256::compress256 (21 samples, 2.17%)</title><rect x="41.0973%" y="293" width="2.1739%" height="15" fill="rgb(215,141,46)"/><text x="41.3473%" y="303.50">s..</text></g><g><title>sha2::sha256::x86::compress (21 samples, 2.17%)</title><rect x="41.0973%" y="277" width="2.1739%" height="15" fill="rgb(250,160,47)"/><text x="41.3473%" y="287.50">s..</text></g><g><title>sha2::sha256::soft::compress (21 samples, 2.17%)</title><rect x="41.0973%" y="261" width="2.1739%" height="15" fill="rgb(216,222,40)"/><text x="41.3473%" y="271.50">s..</text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (19 samples, 1.97%)</title><rect x="41.3043%" y="245" width="1.9669%" height="15" fill="rgb(234,217,39)"/><text x="41.5543%" y="255.50">s..</text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (12 samples, 1.24%)</title><rect x="42.0290%" y="229" width="1.2422%" height="15" fill="rgb(207,178,40)"/><text x="42.2790%" y="239.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (3 samples, 0.31%)</title><rect x="42.9607%" y="213" width="0.3106%" height="15" fill="rgb(221,136,13)"/><text x="43.2107%" y="223.50"></text></g><g><title>alloc::string::String::reserve (1 samples, 0.10%)</title><rect x="43.2712%" y="309" width="0.1035%" height="15" fill="rgb(249,199,10)"/><text x="43.5212%" y="319.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.10%)</title><rect x="43.2712%" y="293" width="0.1035%" height="15" fill="rgb(249,222,13)"/><text x="43.5212%" y="303.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="43.2712%" y="277" width="0.1035%" height="15" fill="rgb(244,185,38)"/><text x="43.5212%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.10%)</title><rect x="43.2712%" y="261" width="0.1035%" height="15" fill="rgb(236,202,9)"/><text x="43.5212%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="43.2712%" y="245" width="0.1035%" height="15" fill="rgb(250,229,37)"/><text x="43.5212%" y="255.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="43.2712%" y="229" width="0.1035%" height="15" fill="rgb(206,174,23)"/><text x="43.5212%" y="239.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="43.2712%" y="213" width="0.1035%" height="15" fill="rgb(211,33,43)"/><text x="43.5212%" y="223.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="43.4783%" y="261" width="0.1035%" height="15" fill="rgb(245,58,50)"/><text x="43.7283%" y="271.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.10%)</title><rect x="43.4783%" y="245" width="0.1035%" height="15" fill="rgb(244,68,36)"/><text x="43.7283%" y="255.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.41%)</title><rect x="43.4783%" y="277" width="0.4141%" height="15" fill="rgb(232,229,15)"/><text x="43.7283%" y="287.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (3 samples, 0.31%)</title><rect x="43.5818%" y="261" width="0.3106%" height="15" fill="rgb(254,30,23)"/><text x="43.8318%" y="271.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2 samples, 0.21%)</title><rect x="43.6853%" y="245" width="0.2070%" height="15" fill="rgb(235,160,14)"/><text x="43.9353%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (4 samples, 0.41%)</title><rect x="43.8923%" y="229" width="0.4141%" height="15" fill="rgb(212,155,44)"/><text x="44.1423%" y="239.50"></text></g><g><title>core::ptr::write (2 samples, 0.21%)</title><rect x="44.0994%" y="213" width="0.2070%" height="15" fill="rgb(226,2,50)"/><text x="44.3494%" y="223.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 1.14%)</title><rect x="43.2712%" y="357" width="1.1387%" height="15" fill="rgb(234,177,6)"/><text x="43.5212%" y="367.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (11 samples, 1.14%)</title><rect x="43.2712%" y="341" width="1.1387%" height="15" fill="rgb(217,24,9)"/><text x="43.5212%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (11 samples, 1.14%)</title><rect x="43.2712%" y="325" width="1.1387%" height="15" fill="rgb(220,13,46)"/><text x="43.5212%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (10 samples, 1.04%)</title><rect x="43.3747%" y="309" width="1.0352%" height="15" fill="rgb(239,221,27)"/><text x="43.6247%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.93%)</title><rect x="43.4783%" y="293" width="0.9317%" height="15" fill="rgb(222,198,25)"/><text x="43.7283%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (5 samples, 0.52%)</title><rect x="43.8923%" y="277" width="0.5176%" height="15" fill="rgb(211,99,13)"/><text x="44.1423%" y="287.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (5 samples, 0.52%)</title><rect x="43.8923%" y="261" width="0.5176%" height="15" fill="rgb(232,111,31)"/><text x="44.1423%" y="271.50"></text></g><g><title>alloc::string::String::push (5 samples, 0.52%)</title><rect x="43.8923%" y="245" width="0.5176%" height="15" fill="rgb(245,82,37)"/><text x="44.1423%" y="255.50"></text></g><g><title>core::char::methods::&lt;impl char&gt;::len_utf8 (1 samples, 0.10%)</title><rect x="44.3064%" y="229" width="0.1035%" height="15" fill="rgb(227,149,46)"/><text x="44.5564%" y="239.50"></text></g><g><title>core::char::methods::len_utf8 (1 samples, 0.10%)</title><rect x="44.3064%" y="213" width="0.1035%" height="15" fill="rgb(218,36,50)"/><text x="44.5564%" y="223.50"></text></g><g><title>lab4::checksum::Checksum::with_sha256 (36 samples, 3.73%)</title><rect x="40.7867%" y="421" width="3.7267%" height="15" fill="rgb(226,80,48)"/><text x="41.0367%" y="431.50">lab4..</text></g><g><title>hex::encode (12 samples, 1.24%)</title><rect x="43.2712%" y="405" width="1.2422%" height="15" fill="rgb(238,224,15)"/><text x="43.5212%" y="415.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (12 samples, 1.24%)</title><rect x="43.2712%" y="389" width="1.2422%" height="15" fill="rgb(241,136,10)"/><text x="43.5212%" y="399.50"></text></g><g><title>hex::encode_to_iter (12 samples, 1.24%)</title><rect x="43.2712%" y="373" width="1.2422%" height="15" fill="rgb(208,32,45)"/><text x="43.5212%" y="383.50"></text></g><g><title>hex::BytesToHexChars::new (1 samples, 0.10%)</title><rect x="44.4099%" y="357" width="0.1035%" height="15" fill="rgb(207,135,9)"/><text x="44.6599%" y="367.50"></text></g><g><title>lab4::package::PackageDownloader::get_next_package_name (1 samples, 0.10%)</title><rect x="44.5135%" y="421" width="0.1035%" height="15" fill="rgb(206,86,44)"/><text x="44.7635%" y="431.50"></text></g><g><title>std::sync::mutex::MutexGuard&lt;T&gt;::new (4 samples, 0.41%)</title><rect x="44.6170%" y="405" width="0.4141%" height="15" fill="rgb(245,177,15)"/><text x="44.8670%" y="415.50"></text></g><g><title>std::sys_common::poison::Flag::borrow (4 samples, 0.41%)</title><rect x="44.6170%" y="389" width="0.4141%" height="15" fill="rgb(206,64,50)"/><text x="44.8670%" y="399.50"></text></g><g><title>std::thread::panicking (4 samples, 0.41%)</title><rect x="44.6170%" y="373" width="0.4141%" height="15" fill="rgb(234,36,40)"/><text x="44.8670%" y="383.50"></text></g><g><title>std::panicking::panicking (4 samples, 0.41%)</title><rect x="44.6170%" y="357" width="0.4141%" height="15" fill="rgb(213,64,8)"/><text x="44.8670%" y="367.50"></text></g><g><title>std::panicking::panic_count::is_zero (4 samples, 0.41%)</title><rect x="44.6170%" y="341" width="0.4141%" height="15" fill="rgb(210,75,36)"/><text x="44.8670%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (3 samples, 0.31%)</title><rect x="44.7205%" y="325" width="0.3106%" height="15" fill="rgb(229,88,21)"/><text x="44.9705%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (3 samples, 0.31%)</title><rect x="44.7205%" y="309" width="0.3106%" height="15" fill="rgb(252,204,47)"/><text x="44.9705%" y="319.50"></text></g><g><title>lab4::package::PackageDownloader::run (461 samples, 47.72%)</title><rect x="16.5631%" y="437" width="47.7226%" height="15" fill="rgb(208,77,27)"/><text x="16.8131%" y="447.50">lab4::package::PackageDownloader::run</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (190 samples, 19.67%)</title><rect x="44.6170%" y="421" width="19.6687%" height="15" fill="rgb(221,76,26)"/><text x="44.8670%" y="431.50">std::sync::mutex::Mutex&lt;T&gt;::lock</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (186 samples, 19.25%)</title><rect x="45.0311%" y="405" width="19.2547%" height="15" fill="rgb(225,139,18)"/><text x="45.2811%" y="415.50">std::sys_common::mutex::Movabl..</text></g><g><title>std::sys::unix::mutex::Mutex::lock (186 samples, 19.25%)</title><rect x="45.0311%" y="389" width="19.2547%" height="15" fill="rgb(230,137,11)"/><text x="45.2811%" y="399.50">std::sys::unix::mutex::Mutex::..</text></g><g><title>__GI___pthread_mutex_lock (186 samples, 19.25%)</title><rect x="45.0311%" y="373" width="19.2547%" height="15" fill="rgb(212,28,1)"/><text x="45.2811%" y="383.50">__GI___pthread_mutex_lock</text></g><g><title>__lll_lock_wait (185 samples, 19.15%)</title><rect x="45.1346%" y="357" width="19.1511%" height="15" fill="rgb(248,164,17)"/><text x="45.3846%" y="367.50">__lll_lock_wait</text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.10%)</title><rect x="64.2857%" y="421" width="0.1035%" height="15" fill="rgb(222,171,42)"/><text x="64.5357%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.10%)</title><rect x="64.2857%" y="405" width="0.1035%" height="15" fill="rgb(243,84,45)"/><text x="64.5357%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="64.2857%" y="389" width="0.1035%" height="15" fill="rgb(252,49,23)"/><text x="64.5357%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.10%)</title><rect x="64.2857%" y="373" width="0.1035%" height="15" fill="rgb(215,19,7)"/><text x="64.5357%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="64.2857%" y="357" width="0.1035%" height="15" fill="rgb(238,81,41)"/><text x="64.5357%" y="367.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="64.2857%" y="341" width="0.1035%" height="15" fill="rgb(210,199,37)"/><text x="64.5357%" y="351.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="64.2857%" y="325" width="0.1035%" height="15" fill="rgb(244,192,49)"/><text x="64.5357%" y="335.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (4 samples, 0.41%)</title><rect x="64.3892%" y="421" width="0.4141%" height="15" fill="rgb(226,211,11)"/><text x="64.6392%" y="431.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (4 samples, 0.41%)</title><rect x="64.8033%" y="405" width="0.4141%" height="15" fill="rgb(236,162,54)"/><text x="65.0533%" y="415.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (2 samples, 0.21%)</title><rect x="65.4244%" y="293" width="0.2070%" height="15" fill="rgb(220,229,9)"/><text x="65.6744%" y="303.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (2 samples, 0.21%)</title><rect x="65.4244%" y="277" width="0.2070%" height="15" fill="rgb(250,87,22)"/><text x="65.6744%" y="287.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.21%)</title><rect x="65.4244%" y="261" width="0.2070%" height="15" fill="rgb(239,43,17)"/><text x="65.6744%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.21%)</title><rect x="65.4244%" y="245" width="0.2070%" height="15" fill="rgb(231,177,25)"/><text x="65.6744%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicI32::compare_and_swap (1 samples, 0.10%)</title><rect x="65.6315%" y="261" width="0.1035%" height="15" fill="rgb(219,179,1)"/><text x="65.8815%" y="271.50"></text></g><g><title>core::sync::atomic::AtomicI32::compare_exchange (1 samples, 0.10%)</title><rect x="65.6315%" y="245" width="0.1035%" height="15" fill="rgb(238,219,53)"/><text x="65.8815%" y="255.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange (1 samples, 0.10%)</title><rect x="65.6315%" y="229" width="0.1035%" height="15" fill="rgb(232,167,36)"/><text x="65.8815%" y="239.50"></text></g><g><title>crossbeam_channel::context::Context::wait_until (25 samples, 2.59%)</title><rect x="65.4244%" y="309" width="2.5880%" height="15" fill="rgb(244,19,51)"/><text x="65.6744%" y="319.50">cr..</text></g><g><title>std::thread::park (23 samples, 2.38%)</title><rect x="65.6315%" y="293" width="2.3810%" height="15" fill="rgb(224,6,22)"/><text x="65.8815%" y="303.50">st..</text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (23 samples, 2.38%)</title><rect x="65.6315%" y="277" width="2.3810%" height="15" fill="rgb(224,145,5)"/><text x="65.8815%" y="287.50">st..</text></g><g><title>std::sys::unix::futex::futex_wait (22 samples, 2.28%)</title><rect x="65.7350%" y="261" width="2.2774%" height="15" fill="rgb(234,130,49)"/><text x="65.9850%" y="271.50">s..</text></g><g><title>syscall (22 samples, 2.28%)</title><rect x="65.7350%" y="245" width="2.2774%" height="15" fill="rgb(254,6,2)"/><text x="65.9850%" y="255.50">s..</text></g><g><title>core::sync::atomic::AtomicBool::swap (1 samples, 0.10%)</title><rect x="68.0124%" y="277" width="0.1035%" height="15" fill="rgb(208,96,46)"/><text x="68.2624%" y="287.50"></text></g><g><title>core::sync::atomic::atomic_swap (1 samples, 0.10%)</title><rect x="68.0124%" y="261" width="0.1035%" height="15" fill="rgb(239,3,39)"/><text x="68.2624%" y="271.50"></text></g><g><title>crossbeam_channel::context::Context::with (27 samples, 2.80%)</title><rect x="65.4244%" y="389" width="2.7950%" height="15" fill="rgb(233,210,1)"/><text x="65.6744%" y="399.50">cr..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (27 samples, 2.80%)</title><rect x="65.4244%" y="373" width="2.7950%" height="15" fill="rgb(244,137,37)"/><text x="65.6744%" y="383.50">st..</text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (27 samples, 2.80%)</title><rect x="65.4244%" y="357" width="2.7950%" height="15" fill="rgb(240,136,2)"/><text x="65.6744%" y="367.50">cr..</text></g><g><title>crossbeam_channel::context::Context::with::_{{closure}} (27 samples, 2.80%)</title><rect x="65.4244%" y="341" width="2.7950%" height="15" fill="rgb(239,18,37)"/><text x="65.6744%" y="351.50">cr..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::_{{closure}} (27 samples, 2.80%)</title><rect x="65.4244%" y="325" width="2.7950%" height="15" fill="rgb(218,185,22)"/><text x="65.6744%" y="335.50">cr..</text></g><g><title>crossbeam_channel::waker::SyncWaker::register (2 samples, 0.21%)</title><rect x="68.0124%" y="309" width="0.2070%" height="15" fill="rgb(225,218,4)"/><text x="68.2624%" y="319.50"></text></g><g><title>crossbeam_channel::utils::Spinlock&lt;T&gt;::lock (2 samples, 0.21%)</title><rect x="68.0124%" y="293" width="0.2070%" height="15" fill="rgb(230,182,32)"/><text x="68.2624%" y="303.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (1 samples, 0.10%)</title><rect x="68.1159%" y="277" width="0.1035%" height="15" fill="rgb(242,56,43)"/><text x="68.3659%" y="287.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (1 samples, 0.10%)</title><rect x="68.1159%" y="261" width="0.1035%" height="15" fill="rgb(233,99,24)"/><text x="68.3659%" y="271.50"></text></g><g><title>core::hint::spin_loop (1 samples, 0.10%)</title><rect x="68.1159%" y="245" width="0.1035%" height="15" fill="rgb(234,209,42)"/><text x="68.3659%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (1 samples, 0.10%)</title><rect x="68.1159%" y="229" width="0.1035%" height="15" fill="rgb(227,7,12)"/><text x="68.3659%" y="239.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="68.3230%" y="373" width="0.1035%" height="15" fill="rgb(245,203,43)"/><text x="68.5730%" y="383.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="68.3230%" y="357" width="0.1035%" height="15" fill="rgb(238,205,33)"/><text x="68.5730%" y="367.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.10%)</title><rect x="68.4265%" y="373" width="0.1035%" height="15" fill="rgb(231,56,7)"/><text x="68.6765%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::read (10 samples, 1.04%)</title><rect x="68.2195%" y="389" width="1.0352%" height="15" fill="rgb(244,186,29)"/><text x="68.4695%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (7 samples, 0.72%)</title><rect x="68.5300%" y="373" width="0.7246%" height="15" fill="rgb(234,111,31)"/><text x="68.7800%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_or (7 samples, 0.72%)</title><rect x="68.5300%" y="357" width="0.7246%" height="15" fill="rgb(241,149,10)"/><text x="68.7800%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (5 samples, 0.52%)</title><rect x="69.2547%" y="373" width="0.5176%" height="15" fill="rgb(249,206,44)"/><text x="69.5047%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (5 samples, 0.52%)</title><rect x="69.2547%" y="357" width="0.5176%" height="15" fill="rgb(251,153,30)"/><text x="69.5047%" y="367.50"></text></g><g><title>core::sync::atomic::fence (3 samples, 0.31%)</title><rect x="69.7723%" y="373" width="0.3106%" height="15" fill="rgb(239,152,38)"/><text x="70.0223%" y="383.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (24 samples, 2.48%)</title><rect x="69.2547%" y="389" width="2.4845%" height="15" fill="rgb(249,139,47)"/><text x="69.5047%" y="399.50">cr..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (16 samples, 1.66%)</title><rect x="70.0828%" y="373" width="1.6563%" height="15" fill="rgb(244,64,35)"/><text x="70.3328%" y="383.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (16 samples, 1.66%)</title><rect x="70.0828%" y="357" width="1.6563%" height="15" fill="rgb(216,46,15)"/><text x="70.3328%" y="367.50"></text></g><g><title>core::hint::spin_loop (16 samples, 1.66%)</title><rect x="70.0828%" y="341" width="1.6563%" height="15" fill="rgb(250,74,19)"/><text x="70.3328%" y="351.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (16 samples, 1.66%)</title><rect x="70.0828%" y="325" width="1.6563%" height="15" fill="rgb(249,42,33)"/><text x="70.3328%" y="335.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (83 samples, 8.59%)</title><rect x="64.8033%" y="421" width="8.5921%" height="15" fill="rgb(242,149,17)"/><text x="65.0533%" y="431.50">crossbeam_ch..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (79 samples, 8.18%)</title><rect x="65.2174%" y="405" width="8.1781%" height="15" fill="rgb(244,29,21)"/><text x="65.4674%" y="415.50">crossbeam_c..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (16 samples, 1.66%)</title><rect x="71.7391%" y="389" width="1.6563%" height="15" fill="rgb(220,130,37)"/><text x="71.9891%" y="399.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (16 samples, 1.66%)</title><rect x="71.7391%" y="373" width="1.6563%" height="15" fill="rgb(211,67,2)"/><text x="71.9891%" y="383.50"></text></g><g><title>core::hint::spin_loop (16 samples, 1.66%)</title><rect x="71.7391%" y="357" width="1.6563%" height="15" fill="rgb(235,68,52)"/><text x="71.9891%" y="367.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (16 samples, 1.66%)</title><rect x="71.7391%" y="341" width="1.6563%" height="15" fill="rgb(246,142,3)"/><text x="71.9891%" y="351.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="73.8095%" y="373" width="0.1035%" height="15" fill="rgb(241,25,7)"/><text x="74.0595%" y="383.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="73.8095%" y="357" width="0.1035%" height="15" fill="rgb(242,119,39)"/><text x="74.0595%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="73.9130%" y="373" width="0.1035%" height="15" fill="rgb(241,98,45)"/><text x="74.1630%" y="383.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (1 samples, 0.10%)</title><rect x="74.0166%" y="373" width="0.1035%" height="15" fill="rgb(254,28,30)"/><text x="74.2666%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.10%)</title><rect x="74.0166%" y="357" width="0.1035%" height="15" fill="rgb(241,142,54)"/><text x="74.2666%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::compare_exchange_weak (10 samples, 1.04%)</title><rect x="74.1201%" y="373" width="1.0352%" height="15" fill="rgb(222,85,15)"/><text x="74.3701%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_compare_exchange_weak (10 samples, 1.04%)</title><rect x="74.1201%" y="357" width="1.0352%" height="15" fill="rgb(210,85,47)"/><text x="74.3701%" y="367.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 0.62%)</title><rect x="75.1553%" y="373" width="0.6211%" height="15" fill="rgb(224,206,25)"/><text x="75.4053%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 0.62%)</title><rect x="75.1553%" y="357" width="0.6211%" height="15" fill="rgb(243,201,19)"/><text x="75.4053%" y="367.50"></text></g><g><title>crossbeam_channel::flavors::list::Block&lt;T&gt;::new (1 samples, 0.10%)</title><rect x="75.7764%" y="373" width="0.1035%" height="15" fill="rgb(236,59,4)"/><text x="76.0264%" y="383.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::zeroed (1 samples, 0.10%)</title><rect x="75.7764%" y="357" width="0.1035%" height="15" fill="rgb(254,179,45)"/><text x="76.0264%" y="367.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_bytes (1 samples, 0.10%)</title><rect x="75.7764%" y="341" width="0.1035%" height="15" fill="rgb(226,14,10)"/><text x="76.0264%" y="351.50"></text></g><g><title>core::intrinsics::write_bytes (1 samples, 0.10%)</title><rect x="75.7764%" y="325" width="0.1035%" height="15" fill="rgb(244,27,41)"/><text x="76.0264%" y="335.50"></text></g><g><title>__memset_avx2_unaligned_erms (1 samples, 0.10%)</title><rect x="75.7764%" y="309" width="0.1035%" height="15" fill="rgb(235,35,32)"/><text x="76.0264%" y="319.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (110 samples, 11.39%)</title><rect x="73.8095%" y="389" width="11.3872%" height="15" fill="rgb(218,68,31)"/><text x="74.0595%" y="399.50">crossbeam_channel..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (90 samples, 9.32%)</title><rect x="75.8799%" y="373" width="9.3168%" height="15" fill="rgb(207,120,37)"/><text x="76.1299%" y="383.50">crossbeam_uti..</text></g><g><title>core::sync::atomic::spin_loop_hint (90 samples, 9.32%)</title><rect x="75.8799%" y="357" width="9.3168%" height="15" fill="rgb(227,98,0)"/><text x="76.1299%" y="367.50">core::sync::a..</text></g><g><title>core::hint::spin_loop (90 samples, 9.32%)</title><rect x="75.8799%" y="341" width="9.3168%" height="15" fill="rgb(207,7,3)"/><text x="76.1299%" y="351.50">core::hint::s..</text></g><g><title>core::core_arch::x86::sse2::_mm_pause (90 samples, 9.32%)</title><rect x="75.8799%" y="325" width="9.3168%" height="15" fill="rgb(206,98,19)"/><text x="76.1299%" y="335.50">core::core_ar..</text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (1 samples, 0.10%)</title><rect x="85.1967%" y="373" width="0.1035%" height="15" fill="rgb(217,5,26)"/><text x="85.4467%" y="383.50"></text></g><g><title>core::ptr::write (1 samples, 0.10%)</title><rect x="85.1967%" y="357" width="0.1035%" height="15" fill="rgb(235,190,38)"/><text x="85.4467%" y="367.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (122 samples, 12.63%)</title><rect x="73.3954%" y="421" width="12.6294%" height="15" fill="rgb(247,86,24)"/><text x="73.6454%" y="431.50">crossbeam_channel::..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (119 samples, 12.32%)</title><rect x="73.7060%" y="405" width="12.3188%" height="15" fill="rgb(205,101,16)"/><text x="73.9560%" y="415.50">crossbeam_channel:..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (8 samples, 0.83%)</title><rect x="85.1967%" y="389" width="0.8282%" height="15" fill="rgb(246,168,33)"/><text x="85.4467%" y="399.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (7 samples, 0.72%)</title><rect x="85.3002%" y="373" width="0.7246%" height="15" fill="rgb(231,114,1)"/><text x="85.5502%" y="383.50"></text></g><g><title>core::sync::atomic::atomic_or (7 samples, 0.72%)</title><rect x="85.3002%" y="357" width="0.7246%" height="15" fill="rgb(207,184,53)"/><text x="85.5502%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::_{{closure}} (16 samples, 1.66%)</title><rect x="86.1284%" y="101" width="1.6563%" height="15" fill="rgb(224,95,51)"/><text x="86.3784%" y="111.50"></text></g><g><title>core::iter::adapters::map_try_fold::_{{closure}} (16 samples, 1.66%)</title><rect x="86.1284%" y="85" width="1.6563%" height="15" fill="rgb(212,188,45)"/><text x="86.3784%" y="95.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::_{{closure}} (15 samples, 1.55%)</title><rect x="86.2319%" y="69" width="1.5528%" height="15" fill="rgb(223,154,38)"/><text x="86.4819%" y="79.50"></text></g><g><title>hex::val (10 samples, 1.04%)</title><rect x="86.7495%" y="53" width="1.0352%" height="15" fill="rgb(251,22,52)"/><text x="86.9995%" y="63.50"></text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 1.86%)</title><rect x="86.1284%" y="197" width="1.8634%" height="15" fill="rgb(229,209,22)"/><text x="86.3784%" y="207.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::find (18 samples, 1.86%)</title><rect x="86.1284%" y="181" width="1.8634%" height="15" fill="rgb(234,138,34)"/><text x="86.3784%" y="191.50">c..</text></g><g><title>&lt;core::iter::adapters::ResultShunt&lt;I,E&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.86%)</title><rect x="86.1284%" y="165" width="1.8634%" height="15" fill="rgb(212,95,11)"/><text x="86.3784%" y="175.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.86%)</title><rect x="86.1284%" y="149" width="1.8634%" height="15" fill="rgb(240,179,47)"/><text x="86.3784%" y="159.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (18 samples, 1.86%)</title><rect x="86.1284%" y="133" width="1.8634%" height="15" fill="rgb(240,163,11)"/><text x="86.3784%" y="143.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (18 samples, 1.86%)</title><rect x="86.1284%" y="117" width="1.8634%" height="15" fill="rgb(236,37,12)"/><text x="86.3784%" y="127.50">c..</text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="87.7847%" y="101" width="0.2070%" height="15" fill="rgb(232,164,16)"/><text x="88.0347%" y="111.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::is_empty (1 samples, 0.10%)</title><rect x="87.8882%" y="85" width="0.1035%" height="15" fill="rgb(244,205,15)"/><text x="88.1382%" y="95.50"></text></g><g><title>hex::decode (25 samples, 2.59%)</title><rect x="86.0248%" y="389" width="2.5880%" height="15" fill="rgb(223,117,47)"/><text x="86.2748%" y="399.50">he..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (25 samples, 2.59%)</title><rect x="86.0248%" y="373" width="2.5880%" height="15" fill="rgb(244,107,35)"/><text x="86.2748%" y="383.50">&lt;a..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (25 samples, 2.59%)</title><rect x="86.0248%" y="357" width="2.5880%" height="15" fill="rgb(205,140,8)"/><text x="86.2748%" y="367.50">co..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (25 samples, 2.59%)</title><rect x="86.0248%" y="341" width="2.5880%" height="15" fill="rgb(228,84,46)"/><text x="86.2748%" y="351.50">&lt;c..</text></g><g><title>core::iter::adapters::process_results (25 samples, 2.59%)</title><rect x="86.0248%" y="325" width="2.5880%" height="15" fill="rgb(254,188,9)"/><text x="86.2748%" y="335.50">co..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::_{{closure}} (25 samples, 2.59%)</title><rect x="86.0248%" y="309" width="2.5880%" height="15" fill="rgb(206,112,54)"/><text x="86.2748%" y="319.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (25 samples, 2.59%)</title><rect x="86.0248%" y="293" width="2.5880%" height="15" fill="rgb(216,84,49)"/><text x="86.2748%" y="303.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (25 samples, 2.59%)</title><rect x="86.0248%" y="277" width="2.5880%" height="15" fill="rgb(214,194,35)"/><text x="86.2748%" y="287.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 2.59%)</title><rect x="86.0248%" y="261" width="2.5880%" height="15" fill="rgb(249,28,3)"/><text x="86.2748%" y="271.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (25 samples, 2.59%)</title><rect x="86.0248%" y="245" width="2.5880%" height="15" fill="rgb(222,56,52)"/><text x="86.2748%" y="255.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (25 samples, 2.59%)</title><rect x="86.0248%" y="229" width="2.5880%" height="15" fill="rgb(245,217,50)"/><text x="86.2748%" y="239.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (25 samples, 2.59%)</title><rect x="86.0248%" y="213" width="2.5880%" height="15" fill="rgb(213,201,24)"/><text x="86.2748%" y="223.50">al..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (6 samples, 0.62%)</title><rect x="87.9917%" y="197" width="0.6211%" height="15" fill="rgb(248,116,28)"/><text x="88.2417%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (6 samples, 0.62%)</title><rect x="87.9917%" y="181" width="0.6211%" height="15" fill="rgb(219,72,43)"/><text x="88.2417%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (6 samples, 0.62%)</title><rect x="87.9917%" y="165" width="0.6211%" height="15" fill="rgb(209,138,14)"/><text x="88.2417%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 0.62%)</title><rect x="87.9917%" y="149" width="0.6211%" height="15" fill="rgb(222,18,33)"/><text x="88.2417%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 0.62%)</title><rect x="87.9917%" y="133" width="0.6211%" height="15" fill="rgb(213,199,7)"/><text x="88.2417%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (6 samples, 0.62%)</title><rect x="87.9917%" y="117" width="0.6211%" height="15" fill="rgb(250,110,10)"/><text x="88.2417%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 0.62%)</title><rect x="87.9917%" y="101" width="0.6211%" height="15" fill="rgb(248,123,6)"/><text x="88.2417%" y="111.50"></text></g><g><title>alloc::alloc::realloc (6 samples, 0.62%)</title><rect x="87.9917%" y="85" width="0.6211%" height="15" fill="rgb(206,91,31)"/><text x="88.2417%" y="95.50"></text></g><g><title>__GI___libc_realloc (6 samples, 0.62%)</title><rect x="87.9917%" y="69" width="0.6211%" height="15" fill="rgb(211,154,13)"/><text x="88.2417%" y="79.50"></text></g><g><title>_int_realloc (1 samples, 0.10%)</title><rect x="88.5093%" y="53" width="0.1035%" height="15" fill="rgb(225,148,7)"/><text x="88.7593%" y="63.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="88.5093%" y="37" width="0.1035%" height="15" fill="rgb(220,160,43)"/><text x="88.7593%" y="47.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.10%)</title><rect x="88.6128%" y="245" width="0.1035%" height="15" fill="rgb(213,52,39)"/><text x="88.8628%" y="255.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (1 samples, 0.10%)</title><rect x="88.6128%" y="229" width="0.1035%" height="15" fill="rgb(243,137,7)"/><text x="88.8628%" y="239.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="88.6128%" y="261" width="0.2070%" height="15" fill="rgb(230,79,13)"/><text x="88.8628%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.10%)</title><rect x="88.7164%" y="245" width="0.1035%" height="15" fill="rgb(247,105,23)"/><text x="88.9664%" y="255.50"></text></g><g><title>core::mem::take (1 samples, 0.10%)</title><rect x="88.7164%" y="229" width="0.1035%" height="15" fill="rgb(223,179,41)"/><text x="88.9664%" y="239.50"></text></g><g><title>core::mem::replace (1 samples, 0.10%)</title><rect x="88.7164%" y="213" width="0.1035%" height="15" fill="rgb(218,9,34)"/><text x="88.9664%" y="223.50"></text></g><g><title>core::mem::swap (1 samples, 0.10%)</title><rect x="88.7164%" y="197" width="0.1035%" height="15" fill="rgb(222,106,8)"/><text x="88.9664%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.10%)</title><rect x="88.7164%" y="181" width="0.1035%" height="15" fill="rgb(211,220,0)"/><text x="88.9664%" y="191.50"></text></g><g><title>lab4::checksum::Checksum::update (28 samples, 2.90%)</title><rect x="86.0248%" y="405" width="2.8986%" height="15" fill="rgb(229,52,16)"/><text x="86.2748%" y="415.50">la..</text></g><g><title>hex::encode (3 samples, 0.31%)</title><rect x="88.6128%" y="389" width="0.3106%" height="15" fill="rgb(212,155,18)"/><text x="88.8628%" y="399.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (3 samples, 0.31%)</title><rect x="88.6128%" y="373" width="0.3106%" height="15" fill="rgb(242,21,14)"/><text x="88.8628%" y="383.50"></text></g><g><title>hex::encode_to_iter (3 samples, 0.31%)</title><rect x="88.6128%" y="357" width="0.3106%" height="15" fill="rgb(222,19,48)"/><text x="88.8628%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.31%)</title><rect x="88.6128%" y="341" width="0.3106%" height="15" fill="rgb(232,45,27)"/><text x="88.8628%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (3 samples, 0.31%)</title><rect x="88.6128%" y="325" width="0.3106%" height="15" fill="rgb(249,103,42)"/><text x="88.8628%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (3 samples, 0.31%)</title><rect x="88.6128%" y="309" width="0.3106%" height="15" fill="rgb(246,81,33)"/><text x="88.8628%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.31%)</title><rect x="88.6128%" y="293" width="0.3106%" height="15" fill="rgb(252,33,42)"/><text x="88.8628%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.31%)</title><rect x="88.6128%" y="277" width="0.3106%" height="15" fill="rgb(209,212,41)"/><text x="88.8628%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="88.8199%" y="261" width="0.1035%" height="15" fill="rgb(207,154,6)"/><text x="89.0699%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (1 samples, 0.10%)</title><rect x="88.8199%" y="245" width="0.1035%" height="15" fill="rgb(223,64,47)"/><text x="89.0699%" y="255.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.10%)</title><rect x="88.8199%" y="229" width="0.1035%" height="15" fill="rgb(211,161,38)"/><text x="89.0699%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.10%)</title><rect x="88.8199%" y="213" width="0.1035%" height="15" fill="rgb(219,138,40)"/><text x="89.0699%" y="223.50"></text></g><g><title>sha2::sha256::soft::add (1 samples, 0.10%)</title><rect x="89.0269%" y="197" width="0.1035%" height="15" fill="rgb(241,228,46)"/><text x="89.2769%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.10%)</title><rect x="89.0269%" y="181" width="0.1035%" height="15" fill="rgb(223,209,38)"/><text x="89.2769%" y="191.50"></text></g><g><title>sha2::sha256::soft::schedule (2 samples, 0.21%)</title><rect x="89.0269%" y="213" width="0.2070%" height="15" fill="rgb(236,164,45)"/><text x="89.2769%" y="223.50"></text></g><g><title>sha2::sha256::soft::sha256msg2 (1 samples, 0.10%)</title><rect x="89.1304%" y="197" width="0.1035%" height="15" fill="rgb(231,15,5)"/><text x="89.3804%" y="207.50"></text></g><g><title>core::num::&lt;impl u32&gt;::rotate_right (2 samples, 0.21%)</title><rect x="89.3375%" y="197" width="0.2070%" height="15" fill="rgb(252,35,15)"/><text x="89.5875%" y="207.50"></text></g><g><title>&lt;D as digest::digest::Digest&gt;::digest (7 samples, 0.72%)</title><rect x="88.9234%" y="389" width="0.7246%" height="15" fill="rgb(248,181,18)"/><text x="89.1734%" y="399.50"></text></g><g><title>digest::fixed::FixedOutput::finalize_fixed (7 samples, 0.72%)</title><rect x="88.9234%" y="373" width="0.7246%" height="15" fill="rgb(233,39,42)"/><text x="89.1734%" y="383.50"></text></g><g><title>&lt;D as digest::fixed::FixedOutput&gt;::finalize_into (6 samples, 0.62%)</title><rect x="89.0269%" y="357" width="0.6211%" height="15" fill="rgb(238,110,33)"/><text x="89.2769%" y="367.50"></text></g><g><title>&lt;sha2::sha256::Sha256 as digest::fixed::FixedOutputDirty&gt;::finalize_into_dirty (6 samples, 0.62%)</title><rect x="89.0269%" y="341" width="0.6211%" height="15" fill="rgb(233,195,10)"/><text x="89.2769%" y="351.50"></text></g><g><title>sha2::sha256::Engine256::finish (6 samples, 0.62%)</title><rect x="89.0269%" y="325" width="0.6211%" height="15" fill="rgb(254,105,3)"/><text x="89.2769%" y="335.50"></text></g><g><title>block_buffer::BlockBuffer&lt;BlockSize&gt;::len64_padding_be (6 samples, 0.62%)</title><rect x="89.0269%" y="309" width="0.6211%" height="15" fill="rgb(221,225,9)"/><text x="89.2769%" y="319.50"></text></g><g><title>sha2::sha256::Engine256::finish::_{{closure}} (6 samples, 0.62%)</title><rect x="89.0269%" y="293" width="0.6211%" height="15" fill="rgb(224,227,45)"/><text x="89.2769%" y="303.50"></text></g><g><title>sha2::sha256::compress256 (6 samples, 0.62%)</title><rect x="89.0269%" y="277" width="0.6211%" height="15" fill="rgb(229,198,43)"/><text x="89.2769%" y="287.50"></text></g><g><title>sha2::sha256::x86::compress (6 samples, 0.62%)</title><rect x="89.0269%" y="261" width="0.6211%" height="15" fill="rgb(206,209,35)"/><text x="89.2769%" y="271.50"></text></g><g><title>sha2::sha256::soft::compress (6 samples, 0.62%)</title><rect x="89.0269%" y="245" width="0.6211%" height="15" fill="rgb(245,195,53)"/><text x="89.2769%" y="255.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_block_u32 (6 samples, 0.62%)</title><rect x="89.0269%" y="229" width="0.6211%" height="15" fill="rgb(240,92,26)"/><text x="89.2769%" y="239.50"></text></g><g><title>sha2::sha256::soft::sha256_digest_round_x2 (4 samples, 0.41%)</title><rect x="89.2340%" y="213" width="0.4141%" height="15" fill="rgb(207,40,23)"/><text x="89.4840%" y="223.50"></text></g><g><title>core::num::&lt;impl u32&gt;::wrapping_add (1 samples, 0.10%)</title><rect x="89.5445%" y="197" width="0.1035%" height="15" fill="rgb(223,111,35)"/><text x="89.7945%" y="207.50"></text></g><g><title>alloc::string::String::reserve (1 samples, 0.10%)</title><rect x="89.6480%" y="293" width="0.1035%" height="15" fill="rgb(229,147,28)"/><text x="89.8980%" y="303.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.10%)</title><rect x="89.6480%" y="277" width="0.1035%" height="15" fill="rgb(211,29,28)"/><text x="89.8980%" y="287.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="89.6480%" y="261" width="0.1035%" height="15" fill="rgb(228,72,33)"/><text x="89.8980%" y="271.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.10%)</title><rect x="89.6480%" y="245" width="0.1035%" height="15" fill="rgb(205,214,31)"/><text x="89.8980%" y="255.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="89.6480%" y="229" width="0.1035%" height="15" fill="rgb(224,111,15)"/><text x="89.8980%" y="239.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="89.6480%" y="213" width="0.1035%" height="15" fill="rgb(253,21,26)"/><text x="89.8980%" y="223.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="89.6480%" y="197" width="0.1035%" height="15" fill="rgb(245,139,43)"/><text x="89.8980%" y="207.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.10%)</title><rect x="89.7516%" y="245" width="0.1035%" height="15" fill="rgb(252,170,7)"/><text x="90.0016%" y="255.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (1 samples, 0.10%)</title><rect x="89.7516%" y="229" width="0.1035%" height="15" fill="rgb(231,118,14)"/><text x="90.0016%" y="239.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="89.7516%" y="261" width="0.2070%" height="15" fill="rgb(238,83,0)"/><text x="90.0016%" y="271.50"></text></g><g><title>core::option::Option&lt;T&gt;::take (1 samples, 0.10%)</title><rect x="89.8551%" y="245" width="0.1035%" height="15" fill="rgb(221,39,39)"/><text x="90.1051%" y="255.50"></text></g><g><title>core::mem::take (1 samples, 0.10%)</title><rect x="89.8551%" y="229" width="0.1035%" height="15" fill="rgb(222,119,46)"/><text x="90.1051%" y="239.50"></text></g><g><title>core::mem::replace (1 samples, 0.10%)</title><rect x="89.8551%" y="213" width="0.1035%" height="15" fill="rgb(222,165,49)"/><text x="90.1051%" y="223.50"></text></g><g><title>core::mem::swap (1 samples, 0.10%)</title><rect x="89.8551%" y="197" width="0.1035%" height="15" fill="rgb(219,113,52)"/><text x="90.1051%" y="207.50"></text></g><g><title>core::ptr::swap_nonoverlapping_one (1 samples, 0.10%)</title><rect x="89.8551%" y="181" width="0.1035%" height="15" fill="rgb(214,7,15)"/><text x="90.1051%" y="191.50"></text></g><g><title>lab4::checksum::Checksum::with_sha256 (11 samples, 1.14%)</title><rect x="88.9234%" y="405" width="1.1387%" height="15" fill="rgb(235,32,4)"/><text x="89.1734%" y="415.50"></text></g><g><title>hex::encode (4 samples, 0.41%)</title><rect x="89.6480%" y="389" width="0.4141%" height="15" fill="rgb(238,90,54)"/><text x="89.8980%" y="399.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (4 samples, 0.41%)</title><rect x="89.6480%" y="373" width="0.4141%" height="15" fill="rgb(213,208,19)"/><text x="89.8980%" y="383.50"></text></g><g><title>hex::encode_to_iter (4 samples, 0.41%)</title><rect x="89.6480%" y="357" width="0.4141%" height="15" fill="rgb(233,156,4)"/><text x="89.8980%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (4 samples, 0.41%)</title><rect x="89.6480%" y="341" width="0.4141%" height="15" fill="rgb(207,194,5)"/><text x="89.8980%" y="351.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (4 samples, 0.41%)</title><rect x="89.6480%" y="325" width="0.4141%" height="15" fill="rgb(206,111,30)"/><text x="89.8980%" y="335.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (4 samples, 0.41%)</title><rect x="89.6480%" y="309" width="0.4141%" height="15" fill="rgb(243,70,54)"/><text x="89.8980%" y="319.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.31%)</title><rect x="89.7516%" y="293" width="0.3106%" height="15" fill="rgb(242,28,8)"/><text x="90.0016%" y="303.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.31%)</title><rect x="89.7516%" y="277" width="0.3106%" height="15" fill="rgb(219,106,18)"/><text x="90.0016%" y="287.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (1 samples, 0.10%)</title><rect x="89.9586%" y="261" width="0.1035%" height="15" fill="rgb(244,222,10)"/><text x="90.2086%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::_{{closure}} (1 samples, 0.10%)</title><rect x="89.9586%" y="245" width="0.1035%" height="15" fill="rgb(236,179,52)"/><text x="90.2086%" y="255.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.10%)</title><rect x="89.9586%" y="229" width="0.1035%" height="15" fill="rgb(213,23,39)"/><text x="90.2086%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.10%)</title><rect x="89.9586%" y="213" width="0.1035%" height="15" fill="rgb(238,48,10)"/><text x="90.2086%" y="223.50"></text></g><g><title>core::ptr::write (1 samples, 0.10%)</title><rect x="89.9586%" y="197" width="0.1035%" height="15" fill="rgb(251,196,23)"/><text x="90.2086%" y="207.50"></text></g><g><title>std::panic::catch_unwind (812 samples, 84.06%)</title><rect x="12.7329%" y="549" width="84.0580%" height="15" fill="rgb(250,152,24)"/><text x="12.9829%" y="559.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (812 samples, 84.06%)</title><rect x="12.7329%" y="533" width="84.0580%" height="15" fill="rgb(209,150,17)"/><text x="12.9829%" y="543.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (812 samples, 84.06%)</title><rect x="12.7329%" y="517" width="84.0580%" height="15" fill="rgb(234,202,34)"/><text x="12.9829%" y="527.50">std::panicking::try::do_call</text></g><g><title>&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (812 samples, 84.06%)</title><rect x="12.7329%" y="501" width="84.0580%" height="15" fill="rgb(253,148,53)"/><text x="12.9829%" y="511.50">&lt;std::panic::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}} (812 samples, 84.06%)</title><rect x="12.7329%" y="485" width="84.0580%" height="15" fill="rgb(218,129,16)"/><text x="12.9829%" y="495.50">std::thread::Builder::spawn_unchecked::_{{closure}}::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (812 samples, 84.06%)</title><rect x="12.7329%" y="469" width="84.0580%" height="15" fill="rgb(216,85,19)"/><text x="12.9829%" y="479.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::hackathon::_{{closure}} (812 samples, 84.06%)</title><rect x="12.7329%" y="453" width="84.0580%" height="15" fill="rgb(235,228,7)"/><text x="12.9829%" y="463.50">lab4::hackathon::_{{closure}}</text></g><g><title>lab4::student::Student::run (314 samples, 32.51%)</title><rect x="64.2857%" y="437" width="32.5052%" height="15" fill="rgb(245,175,0)"/><text x="64.5357%" y="447.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (104 samples, 10.77%)</title><rect x="86.0248%" y="421" width="10.7660%" height="15" fill="rgb(208,168,36)"/><text x="86.2748%" y="431.50">lab4::student::S..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (65 samples, 6.73%)</title><rect x="90.0621%" y="405" width="6.7288%" height="15" fill="rgb(246,171,24)"/><text x="90.3121%" y="415.50">std::sync..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (65 samples, 6.73%)</title><rect x="90.0621%" y="389" width="6.7288%" height="15" fill="rgb(215,142,24)"/><text x="90.3121%" y="399.50">std::sys_..</text></g><g><title>std::sys::unix::mutex::Mutex::lock (65 samples, 6.73%)</title><rect x="90.0621%" y="373" width="6.7288%" height="15" fill="rgb(250,187,7)"/><text x="90.3121%" y="383.50">std::sys:..</text></g><g><title>__GI___pthread_mutex_lock (65 samples, 6.73%)</title><rect x="90.0621%" y="357" width="6.7288%" height="15" fill="rgb(228,66,33)"/><text x="90.3121%" y="367.50">__GI___pt..</text></g><g><title>__lll_lock_wait (65 samples, 6.73%)</title><rect x="90.0621%" y="341" width="6.7288%" height="15" fill="rgb(234,215,21)"/><text x="90.3121%" y="351.50">__lll_loc..</text></g><g><title>__GI___libc_malloc (1 samples, 0.10%)</title><rect x="96.7909%" y="517" width="0.1035%" height="15" fill="rgb(222,191,20)"/><text x="97.0409%" y="527.50"></text></g><g><title>tcache_init (1 samples, 0.10%)</title><rect x="96.7909%" y="501" width="0.1035%" height="15" fill="rgb(245,79,54)"/><text x="97.0409%" y="511.50"></text></g><g><title>tcache_init (1 samples, 0.10%)</title><rect x="96.7909%" y="485" width="0.1035%" height="15" fill="rgb(240,10,37)"/><text x="97.0409%" y="495.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="96.7909%" y="469" width="0.1035%" height="15" fill="rgb(214,192,32)"/><text x="97.0409%" y="479.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (814 samples, 84.27%)</title><rect x="12.7329%" y="613" width="84.2650%" height="15" fill="rgb(209,36,54)"/><text x="12.9829%" y="623.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (814 samples, 84.27%)</title><rect x="12.7329%" y="597" width="84.2650%" height="15" fill="rgb(220,10,11)"/><text x="12.9829%" y="607.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (814 samples, 84.27%)</title><rect x="12.7329%" y="581" width="84.2650%" height="15" fill="rgb(221,106,17)"/><text x="12.9829%" y="591.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked::_{{closure}} (814 samples, 84.27%)</title><rect x="12.7329%" y="565" width="84.2650%" height="15" fill="rgb(251,142,44)"/><text x="12.9829%" y="575.50">std::thread::Builder::spawn_unchecked::_{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (2 samples, 0.21%)</title><rect x="96.7909%" y="549" width="0.2070%" height="15" fill="rgb(238,13,15)"/><text x="97.0409%" y="559.50"></text></g><g><title>pthread_getattr_np (2 samples, 0.21%)</title><rect x="96.7909%" y="533" width="0.2070%" height="15" fill="rgb(208,107,27)"/><text x="97.0409%" y="543.50"></text></g><g><title>__pthread_getaffinity_new (1 samples, 0.10%)</title><rect x="96.8944%" y="517" width="0.1035%" height="15" fill="rgb(205,136,37)"/><text x="97.1444%" y="527.50"></text></g><g><title>core::sync::atomic::AtomicBool::load (1 samples, 0.10%)</title><rect x="97.1014%" y="581" width="0.1035%" height="15" fill="rgb(250,205,27)"/><text x="97.3514%" y="591.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.10%)</title><rect x="97.1014%" y="565" width="0.1035%" height="15" fill="rgb(210,80,43)"/><text x="97.3514%" y="575.50"></text></g><g><title>__GI___mmap64 (1 samples, 0.10%)</title><rect x="97.2050%" y="549" width="0.1035%" height="15" fill="rgb(247,160,36)"/><text x="97.4550%" y="559.50"></text></g><g><title>__GI___mprotect (1 samples, 0.10%)</title><rect x="97.3085%" y="549" width="0.1035%" height="15" fill="rgb(234,13,49)"/><text x="97.5585%" y="559.50"></text></g><g><title>__GI___clone (899 samples, 93.06%)</title><rect x="4.5549%" y="661" width="93.0642%" height="15" fill="rgb(234,122,0)"/><text x="4.8049%" y="671.50">__GI___clone</text></g><g><title>start_thread (821 samples, 84.99%)</title><rect x="12.6294%" y="645" width="84.9896%" height="15" fill="rgb(207,146,38)"/><text x="12.8794%" y="655.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (820 samples, 84.89%)</title><rect x="12.7329%" y="629" width="84.8861%" height="15" fill="rgb(207,177,25)"/><text x="12.9829%" y="639.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (6 samples, 0.62%)</title><rect x="96.9979%" y="613" width="0.6211%" height="15" fill="rgb(211,178,42)"/><text x="97.2479%" y="623.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (6 samples, 0.62%)</title><rect x="96.9979%" y="597" width="0.6211%" height="15" fill="rgb(230,69,54)"/><text x="97.2479%" y="607.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (4 samples, 0.41%)</title><rect x="97.2050%" y="581" width="0.4141%" height="15" fill="rgb(214,135,41)"/><text x="97.4550%" y="591.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (4 samples, 0.41%)</title><rect x="97.2050%" y="565" width="0.4141%" height="15" fill="rgb(237,67,25)"/><text x="97.4550%" y="575.50"></text></g><g><title>std::sys::unix::os::page_size (2 samples, 0.21%)</title><rect x="97.4120%" y="549" width="0.2070%" height="15" fill="rgb(222,189,50)"/><text x="97.6620%" y="559.50"></text></g><g><title>__GI___sysconf (2 samples, 0.21%)</title><rect x="97.4120%" y="533" width="0.2070%" height="15" fill="rgb(245,148,34)"/><text x="97.6620%" y="543.50"></text></g><g><title>linux_sysconf (2 samples, 0.21%)</title><rect x="97.4120%" y="517" width="0.2070%" height="15" fill="rgb(222,29,6)"/><text x="97.6620%" y="527.50"></text></g><g><title>posix_sysconf (2 samples, 0.21%)</title><rect x="97.4120%" y="501" width="0.2070%" height="15" fill="rgb(221,189,43)"/><text x="97.6620%" y="511.50"></text></g><g><title>__GI___getpagesize (1 samples, 0.10%)</title><rect x="97.5155%" y="485" width="0.1035%" height="15" fill="rgb(207,36,27)"/><text x="97.7655%" y="495.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.21%)</title><rect x="97.6190%" y="661" width="0.2070%" height="15" fill="rgb(217,90,24)"/><text x="97.8690%" y="671.50"></text></g><g><title>_dl_start_user (1 samples, 0.10%)</title><rect x="97.8261%" y="661" width="0.1035%" height="15" fill="rgb(224,66,35)"/><text x="98.0761%" y="671.50"></text></g><g><title>_dl_init (1 samples, 0.10%)</title><rect x="97.8261%" y="645" width="0.1035%" height="15" fill="rgb(221,13,50)"/><text x="98.0761%" y="655.50"></text></g><g><title>call_init (1 samples, 0.10%)</title><rect x="97.8261%" y="629" width="0.1035%" height="15" fill="rgb(236,68,49)"/><text x="98.0761%" y="639.50"></text></g><g><title>init_cacheinfo (1 samples, 0.10%)</title><rect x="97.8261%" y="613" width="0.1035%" height="15" fill="rgb(229,146,28)"/><text x="98.0761%" y="623.50"></text></g><g><title>handle_intel (1 samples, 0.10%)</title><rect x="97.8261%" y="597" width="0.1035%" height="15" fill="rgb(225,31,38)"/><text x="98.0761%" y="607.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="98.5507%" y="453" width="0.1035%" height="15" fill="rgb(250,208,3)"/><text x="98.8007%" y="463.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="98.5507%" y="437" width="0.1035%" height="15" fill="rgb(246,54,23)"/><text x="98.8007%" y="447.50"></text></g><g><title>alloc::sync::Arc&lt;T&gt;::drop_slow (1 samples, 0.10%)</title><rect x="98.5507%" y="421" width="0.1035%" height="15" fill="rgb(243,76,11)"/><text x="98.8007%" y="431.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="98.5507%" y="405" width="0.1035%" height="15" fill="rgb(245,21,50)"/><text x="98.8007%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="98.5507%" y="389" width="0.1035%" height="15" fill="rgb(228,9,43)"/><text x="98.8007%" y="399.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="98.5507%" y="373" width="0.1035%" height="15" fill="rgb(208,100,47)"/><text x="98.8007%" y="383.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="98.5507%" y="357" width="0.1035%" height="15" fill="rgb(232,26,8)"/><text x="98.8007%" y="367.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="98.5507%" y="341" width="0.1035%" height="15" fill="rgb(216,166,38)"/><text x="98.8007%" y="351.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="98.5507%" y="325" width="0.1035%" height="15" fill="rgb(251,202,51)"/><text x="98.8007%" y="335.50"></text></g><g><title>core::ptr::drop_in_place (1 samples, 0.10%)</title><rect x="98.5507%" y="309" width="0.1035%" height="15" fill="rgb(254,216,34)"/><text x="98.8007%" y="319.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.10%)</title><rect x="98.5507%" y="293" width="0.1035%" height="15" fill="rgb(251,32,27)"/><text x="98.8007%" y="303.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::dealloc (1 samples, 0.10%)</title><rect x="98.5507%" y="277" width="0.1035%" height="15" fill="rgb(208,127,28)"/><text x="98.8007%" y="287.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.10%)</title><rect x="98.5507%" y="261" width="0.1035%" height="15" fill="rgb(224,137,22)"/><text x="98.8007%" y="271.50"></text></g><g><title>__GI___libc_free (1 samples, 0.10%)</title><rect x="98.5507%" y="245" width="0.1035%" height="15" fill="rgb(254,70,32)"/><text x="98.8007%" y="255.50"></text></g><g><title>_int_free (1 samples, 0.10%)</title><rect x="98.5507%" y="229" width="0.1035%" height="15" fill="rgb(229,75,37)"/><text x="98.8007%" y="239.50"></text></g><g><title>lab4::read_ideas (2 samples, 0.21%)</title><rect x="98.6542%" y="453" width="0.2070%" height="15" fill="rgb(252,64,23)"/><text x="98.9042%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.21%)</title><rect x="98.6542%" y="437" width="0.2070%" height="15" fill="rgb(232,162,48)"/><text x="98.9042%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.21%)</title><rect x="98.6542%" y="421" width="0.2070%" height="15" fill="rgb(246,160,12)"/><text x="98.9042%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.21%)</title><rect x="98.6542%" y="405" width="0.2070%" height="15" fill="rgb(247,166,0)"/><text x="98.9042%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.21%)</title><rect x="98.6542%" y="389" width="0.2070%" height="15" fill="rgb(249,219,21)"/><text x="98.9042%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.21%)</title><rect x="98.6542%" y="373" width="0.2070%" height="15" fill="rgb(205,209,3)"/><text x="98.9042%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::extend_desugared (2 samples, 0.21%)</title><rect x="98.6542%" y="357" width="0.2070%" height="15" fill="rgb(243,44,1)"/><text x="98.9042%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="98.6542%" y="341" width="0.2070%" height="15" fill="rgb(206,159,16)"/><text x="98.9042%" y="351.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="98.6542%" y="325" width="0.2070%" height="15" fill="rgb(244,77,30)"/><text x="98.9042%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.21%)</title><rect x="98.6542%" y="309" width="0.2070%" height="15" fill="rgb(218,69,12)"/><text x="98.9042%" y="319.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.21%)</title><rect x="98.6542%" y="293" width="0.2070%" height="15" fill="rgb(212,87,7)"/><text x="98.9042%" y="303.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.21%)</title><rect x="98.6542%" y="277" width="0.2070%" height="15" fill="rgb(245,114,25)"/><text x="98.9042%" y="287.50"></text></g><g><title>lab4::read_ideas::_{{closure}}::_{{closure}} (2 samples, 0.21%)</title><rect x="98.6542%" y="261" width="0.2070%" height="15" fill="rgb(210,61,42)"/><text x="98.9042%" y="271.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.21%)</title><rect x="98.6542%" y="245" width="0.2070%" height="15" fill="rgb(211,52,33)"/><text x="98.9042%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::clone::Clone&gt;::clone (2 samples, 0.21%)</title><rect x="98.6542%" y="229" width="0.2070%" height="15" fill="rgb(234,58,33)"/><text x="98.9042%" y="239.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (2 samples, 0.21%)</title><rect x="98.6542%" y="213" width="0.2070%" height="15" fill="rgb(220,115,36)"/><text x="98.9042%" y="223.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.21%)</title><rect x="98.6542%" y="197" width="0.2070%" height="15" fill="rgb(243,153,54)"/><text x="98.9042%" y="207.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.21%)</title><rect x="98.6542%" y="181" width="0.2070%" height="15" fill="rgb(251,47,18)"/><text x="98.9042%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (2 samples, 0.21%)</title><rect x="98.6542%" y="165" width="0.2070%" height="15" fill="rgb(242,102,42)"/><text x="98.9042%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.21%)</title><rect x="98.6542%" y="149" width="0.2070%" height="15" fill="rgb(234,31,38)"/><text x="98.9042%" y="159.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.21%)</title><rect x="98.6542%" y="133" width="0.2070%" height="15" fill="rgb(221,117,51)"/><text x="98.9042%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (2 samples, 0.21%)</title><rect x="98.6542%" y="117" width="0.2070%" height="15" fill="rgb(212,20,18)"/><text x="98.9042%" y="127.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.21%)</title><rect x="98.6542%" y="101" width="0.2070%" height="15" fill="rgb(245,133,36)"/><text x="98.9042%" y="111.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.21%)</title><rect x="98.6542%" y="85" width="0.2070%" height="15" fill="rgb(212,6,19)"/><text x="98.9042%" y="95.50"></text></g><g><title>__GI___libc_malloc (2 samples, 0.21%)</title><rect x="98.6542%" y="69" width="0.2070%" height="15" fill="rgb(218,1,36)"/><text x="98.9042%" y="79.50"></text></g><g><title>_int_malloc (1 samples, 0.10%)</title><rect x="98.7578%" y="53" width="0.1035%" height="15" fill="rgb(246,84,54)"/><text x="99.0078%" y="63.50"></text></g><g><title>lab4::read_lines (1 samples, 0.10%)</title><rect x="98.8613%" y="453" width="0.1035%" height="15" fill="rgb(242,110,6)"/><text x="99.1113%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::push (1 samples, 0.10%)</title><rect x="98.8613%" y="437" width="0.1035%" height="15" fill="rgb(214,47,5)"/><text x="99.1113%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::reserve (1 samples, 0.10%)</title><rect x="98.8613%" y="421" width="0.1035%" height="15" fill="rgb(218,159,25)"/><text x="99.1113%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.10%)</title><rect x="98.8613%" y="405" width="0.1035%" height="15" fill="rgb(215,211,28)"/><text x="99.1113%" y="415.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::try_reserve (1 samples, 0.10%)</title><rect x="98.8613%" y="389" width="0.1035%" height="15" fill="rgb(238,59,32)"/><text x="99.1113%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.10%)</title><rect x="98.8613%" y="373" width="0.1035%" height="15" fill="rgb(226,82,3)"/><text x="99.1113%" y="383.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.10%)</title><rect x="98.8613%" y="357" width="0.1035%" height="15" fill="rgb(240,164,32)"/><text x="99.1113%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::grow (1 samples, 0.10%)</title><rect x="98.8613%" y="341" width="0.1035%" height="15" fill="rgb(232,46,7)"/><text x="99.1113%" y="351.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.10%)</title><rect x="98.8613%" y="325" width="0.1035%" height="15" fill="rgb(229,129,53)"/><text x="99.1113%" y="335.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.10%)</title><rect x="98.8613%" y="309" width="0.1035%" height="15" fill="rgb(234,188,29)"/><text x="99.1113%" y="319.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.10%)</title><rect x="98.8613%" y="293" width="0.1035%" height="15" fill="rgb(246,141,4)"/><text x="99.1113%" y="303.50"></text></g><g><title>_int_realloc (1 samples, 0.10%)</title><rect x="98.8613%" y="277" width="0.1035%" height="15" fill="rgb(229,23,39)"/><text x="99.1113%" y="287.50"></text></g><g><title>__memmove_avx_unaligned_erms (1 samples, 0.10%)</title><rect x="98.8613%" y="261" width="0.1035%" height="15" fill="rgb(206,12,3)"/><text x="99.1113%" y="271.50"></text></g><g><title>__GI__dl_allocate_tls (1 samples, 0.10%)</title><rect x="98.9648%" y="357" width="0.1035%" height="15" fill="rgb(252,226,20)"/><text x="99.2148%" y="367.50"></text></g><g><title>allocate_dtv (1 samples, 0.10%)</title><rect x="98.9648%" y="341" width="0.1035%" height="15" fill="rgb(216,123,35)"/><text x="99.2148%" y="351.50"></text></g><g><title>__libc_calloc (1 samples, 0.10%)</title><rect x="98.9648%" y="325" width="0.1035%" height="15" fill="rgb(212,68,40)"/><text x="99.2148%" y="335.50"></text></g><g><title>__libc_start_main (11 samples, 1.14%)</title><rect x="98.5507%" y="645" width="1.1387%" height="15" fill="rgb(254,125,32)"/><text x="98.8007%" y="655.50"></text></g><g><title>main (11 samples, 1.14%)</title><rect x="98.5507%" y="629" width="1.1387%" height="15" fill="rgb(253,97,22)"/><text x="98.8007%" y="639.50"></text></g><g><title>std::rt::lang_start_internal (11 samples, 1.14%)</title><rect x="98.5507%" y="613" width="1.1387%" height="15" fill="rgb(241,101,14)"/><text x="98.8007%" y="623.50"></text></g><g><title>std::panic::catch_unwind (11 samples, 1.14%)</title><rect x="98.5507%" y="597" width="1.1387%" height="15" fill="rgb(238,103,29)"/><text x="98.8007%" y="607.50"></text></g><g><title>std::panicking::try (11 samples, 1.14%)</title><rect x="98.5507%" y="581" width="1.1387%" height="15" fill="rgb(233,195,47)"/><text x="98.8007%" y="591.50"></text></g><g><title>std::panicking::try::do_call (11 samples, 1.14%)</title><rect x="98.5507%" y="565" width="1.1387%" height="15" fill="rgb(246,218,30)"/><text x="98.8007%" y="575.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (11 samples, 1.14%)</title><rect x="98.5507%" y="549" width="1.1387%" height="15" fill="rgb(219,145,47)"/><text x="98.8007%" y="559.50"></text></g><g><title>std::rt::lang_start::_{{closure}} (11 samples, 1.14%)</title><rect x="98.5507%" y="533" width="1.1387%" height="15" fill="rgb(243,12,26)"/><text x="98.8007%" y="543.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (11 samples, 1.14%)</title><rect x="98.5507%" y="517" width="1.1387%" height="15" fill="rgb(214,87,16)"/><text x="98.8007%" y="527.50"></text></g><g><title>core::ops::function::FnOnce::call_once (11 samples, 1.14%)</title><rect x="98.5507%" y="501" width="1.1387%" height="15" fill="rgb(208,99,42)"/><text x="98.8007%" y="511.50"></text></g><g><title>lab4::main (11 samples, 1.14%)</title><rect x="98.5507%" y="485" width="1.1387%" height="15" fill="rgb(253,99,2)"/><text x="98.8007%" y="495.50"></text></g><g><title>lab4::hackathon (11 samples, 1.14%)</title><rect x="98.5507%" y="469" width="1.1387%" height="15" fill="rgb(220,168,23)"/><text x="98.8007%" y="479.50"></text></g><g><title>std::thread::spawn (7 samples, 0.72%)</title><rect x="98.9648%" y="453" width="0.7246%" height="15" fill="rgb(242,38,24)"/><text x="99.2148%" y="463.50"></text></g><g><title>std::thread::Builder::spawn (7 samples, 0.72%)</title><rect x="98.9648%" y="437" width="0.7246%" height="15" fill="rgb(225,182,9)"/><text x="99.2148%" y="447.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (7 samples, 0.72%)</title><rect x="98.9648%" y="421" width="0.7246%" height="15" fill="rgb(243,178,37)"/><text x="99.2148%" y="431.50"></text></g><g><title>std::sys::unix::thread::Thread::new (7 samples, 0.72%)</title><rect x="98.9648%" y="405" width="0.7246%" height="15" fill="rgb(232,139,19)"/><text x="99.2148%" y="415.50"></text></g><g><title>__pthread_create_2_1 (7 samples, 0.72%)</title><rect x="98.9648%" y="389" width="0.7246%" height="15" fill="rgb(225,201,24)"/><text x="99.2148%" y="399.50"></text></g><g><title>allocate_stack (7 samples, 0.72%)</title><rect x="98.9648%" y="373" width="0.7246%" height="15" fill="rgb(221,47,46)"/><text x="99.2148%" y="383.50"></text></g><g><title>setup_stack_prot (6 samples, 0.62%)</title><rect x="99.0683%" y="357" width="0.6211%" height="15" fill="rgb(249,23,13)"/><text x="99.3183%" y="367.50"></text></g><g><title>__GI___mprotect (5 samples, 0.52%)</title><rect x="99.1718%" y="341" width="0.5176%" height="15" fill="rgb(219,9,5)"/><text x="99.4218%" y="351.50"></text></g><g><title>__GI___tunables_init (1 samples, 0.10%)</title><rect x="99.6894%" y="597" width="0.1035%" height="15" fill="rgb(254,171,16)"/><text x="99.9394%" y="607.50"></text></g><g><title>get_next_env (1 samples, 0.10%)</title><rect x="99.6894%" y="581" width="0.1035%" height="15" fill="rgb(230,171,20)"/><text x="99.9394%" y="591.50"></text></g><g><title>_dl_start_final (2 samples, 0.21%)</title><rect x="99.6894%" y="629" width="0.2070%" height="15" fill="rgb(210,71,41)"/><text x="99.9394%" y="639.50"></text></g><g><title>_dl_sysdep_start (2 samples, 0.21%)</title><rect x="99.6894%" y="613" width="0.2070%" height="15" fill="rgb(206,173,20)"/><text x="99.9394%" y="623.50"></text></g><g><title>dl_main (1 samples, 0.10%)</title><rect x="99.7930%" y="597" width="0.1035%" height="15" fill="rgb(233,88,34)"/><text x="100.0430%" y="607.50"></text></g><g><title>_dl_map_object_deps (1 samples, 0.10%)</title><rect x="99.7930%" y="581" width="0.1035%" height="15" fill="rgb(223,209,46)"/><text x="100.0430%" y="591.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.10%)</title><rect x="99.7930%" y="565" width="0.1035%" height="15" fill="rgb(250,43,18)"/><text x="100.0430%" y="575.50"></text></g><g><title>openaux (1 samples, 0.10%)</title><rect x="99.7930%" y="549" width="0.1035%" height="15" fill="rgb(208,13,10)"/><text x="100.0430%" y="559.50"></text></g><g><title>_dl_map_object (1 samples, 0.10%)</title><rect x="99.7930%" y="533" width="0.1035%" height="15" fill="rgb(212,200,36)"/><text x="100.0430%" y="543.50"></text></g><g><title>open_path (1 samples, 0.10%)</title><rect x="99.7930%" y="517" width="0.1035%" height="15" fill="rgb(225,90,30)"/><text x="100.0430%" y="527.50"></text></g><g><title>all (966 samples, 100%)</title><rect x="0.0000%" y="693" width="100.0000%" height="15" fill="rgb(236,182,39)"/><text x="0.2500%" y="703.50"></text></g><g><title>lab4 (966 samples, 100.00%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(212,144,35)"/><text x="0.2500%" y="687.50">lab4</text></g><g><title>_start (20 samples, 2.07%)</title><rect x="97.9296%" y="661" width="2.0704%" height="15" fill="rgb(228,63,44)"/><text x="98.1796%" y="671.50">_..</text></g><g><title>_dl_start (3 samples, 0.31%)</title><rect x="99.6894%" y="645" width="0.3106%" height="15" fill="rgb(228,109,6)"/><text x="99.9394%" y="655.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.10%)</title><rect x="99.8965%" y="629" width="0.1035%" height="15" fill="rgb(238,117,24)"/><text x="100.1465%" y="639.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 0.10%)</title><rect x="99.8965%" y="613" width="0.1035%" height="15" fill="rgb(242,26,26)"/><text x="100.1465%" y="623.50"></text></g></svg></svg>